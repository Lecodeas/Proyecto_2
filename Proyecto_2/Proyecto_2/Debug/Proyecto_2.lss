
Proyecto_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000b1a  00000bae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800102  00800102  00000bb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000c20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000117b  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a47  00000000  00000000  00001ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd4  00000000  00000000  0000291a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  000034f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057f  00000000  00000000  000036e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000546  00000000  00000000  00003c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000041ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  9e:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupADC>:

uint8_t valoradc;

void setupADC(void){
	//Digital disable
	DIDR0 = 0;
  a6:	ee e7       	ldi	r30, 0x7E	; 126
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	DIDR0 |= (1<<ADC5D) | (1<< ADC4D); //ADC5 y ADC4
  ac:	80 81       	ld	r24, Z
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	80 83       	st	Z, r24
	//Setup general
	ADMUX = 0;
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Vcc ref | Just. Izq. | Mux ADC7
  b8:	80 81       	ld	r24, Z
  ba:	87 66       	ori	r24, 0x67	; 103
  bc:	80 83       	st	Z, r24
	ADCSRA = 0;
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Int. En | Presc. 128 (125kHz)
  c4:	80 81       	ld	r24, Z
  c6:	8f 60       	ori	r24, 0x0F	; 15
  c8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); // Enable
  ca:	80 81       	ld	r24, Z
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Primer Inicio
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <fetchADCH>:
}

uint8_t fetchADCH(void){
	return (valoradc);
}
  d8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <valoradc>
  dc:	08 95       	ret

000000de <__vector_21>:

ISR(ADC_vect){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
	valoradc = ADCH; // Almacenar valor
  ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ee:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <valoradc>
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <setupGeneral>:

//OTRAS FUNCIONES
void setupGeneral(void){
	//Entradas y Salidas
	//ENTRADAS
	DDRD = 0; //Solo PD1 será salida
  fe:	1a b8       	out	0x0a, r1	; 10
	
	//SALIDAS
	DDRC = 0x0F; //Todas salidas (Digital disabled para PC4 y PC5)
 100:	8f e0       	ldi	r24, 0x0F	; 15
 102:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF; //Todas salidas
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD1);		
 108:	8a b1       	in	r24, 0x0a	; 10
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	8a b9       	out	0x0a, r24	; 10
	
	//LED de estado inicial
	PORTC &= 0xF0; //Limpiar nibble de PC0, 1 y 2
 10e:	88 b1       	in	r24, 0x08	; 8
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1<<DDC0); //Led de Estado 1
 114:	88 b1       	in	r24, 0x08	; 8
 116:	81 60       	ori	r24, 0x01	; 1
 118:	88 b9       	out	0x08, r24	; 8
	
	//Interrupciones de Pines
	PCICR = 0;
 11a:	e8 e6       	ldi	r30, 0x68	; 104
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	10 82       	st	Z, r1
	PCICR |= (1<<PCIE2); //Interrupciones de PIND
 120:	80 81       	ld	r24, Z
 122:	84 60       	ori	r24, 0x04	; 4
 124:	80 83       	st	Z, r24
	PCMSK2 = 0;
 126:	ed e6       	ldi	r30, 0x6D	; 109
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	10 82       	st	Z, r1
	PCMSK2 |= (1<<PCINT21) | (1<<PCINT20); //PD4, PD5
 12c:	80 81       	ld	r24, Z
 12e:	80 63       	ori	r24, 0x30	; 48
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <main>:
void setupGeneral(void);

//PRINCIPAL
int main(void)
{
	cli(); 
 134:	f8 94       	cli
	setupGeneral();
 136:	0e 94 7f 00 	call	0xfe	; 0xfe <setupGeneral>
    setupADC();
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <setupADC>
	setupPWM1();
 13e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <setupPWM1>
	setupTimer2();
 142:	0e 94 c2 02 	call	0x584	; 0x584 <setupTimer2>
	setupUART();
 146:	0e 94 2e 03 	call	0x65c	; 0x65c <setupUART>
	sei();
 14a:	78 94       	sei
	
    while (1) 
    {
		switch(Estado){
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	21 f0       	breq	.+8      	; 0x15c <main+0x28>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	09 f4       	brne	.+2      	; 0x15a <main+0x26>
 158:	7a c0       	rjmp	.+244    	; 0x24e <main+0x11a>
 15a:	f8 cf       	rjmp	.-16     	; 0x14c <main+0x18>
			
			case MANUAL: //MODO MANUAL
				//Servo 1 PB3
				adchleido = fetchADCH(); //Recibo el adch actual
 15c:	0e 94 6c 00 	call	0xd8	; 0xd8 <fetchADCH>
 160:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adchleido>
				servo1 = adchleido;
 164:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adchleido>
 168:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <servo1>
				actualizar_servomanual(adchleido, 1); //Lo envía al servo 1
 16c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adchleido>
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <actualizar_servomanual>
				ADMUX &= 0xF0;
 176:	cc e7       	ldi	r28, 0x7C	; 124
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	88 81       	ld	r24, Y
 17c:	80 7f       	andi	r24, 0xF0	; 240
 17e:	88 83       	st	Y, r24
				ADMUX |= (1<<MUX2) | (1<<MUX1); //Remultiplexado ADC6
 180:	88 81       	ld	r24, Y
 182:	86 60       	ori	r24, 0x06	; 6
 184:	88 83       	st	Y, r24
				ADCSRA |= (1<<ADSC); //Volver a iniciar ADC
 186:	0a e7       	ldi	r16, 0x7A	; 122
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	f8 01       	movw	r30, r16
 18c:	80 81       	ld	r24, Z
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8f e0       	ldi	r24, 0x0F	; 15
 194:	97 e2       	ldi	r25, 0x27	; 39
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x62>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x68>
 19c:	00 00       	nop
				_delay_us(250);
				
				//Servo 2 OC1B
				adchleido = fetchADCH(); //Recibo el adch actual
 19e:	0e 94 6c 00 	call	0xd8	; 0xd8 <fetchADCH>
 1a2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adchleido>
				servo2 = adchleido;
 1a6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adchleido>
 1aa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <servo2>
				actualizar_servo(adchleido, 2); //Lo envía al servo 2
 1ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adchleido>
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	0e 94 9f 02 	call	0x53e	; 0x53e <actualizar_servo>
				ADMUX &= 0xF0;
 1b8:	88 81       	ld	r24, Y
 1ba:	80 7f       	andi	r24, 0xF0	; 240
 1bc:	88 83       	st	Y, r24
				ADMUX |= (1<<MUX2) | (1<<MUX0); //Remultiplexado ADC5
 1be:	88 81       	ld	r24, Y
 1c0:	85 60       	ori	r24, 0x05	; 5
 1c2:	88 83       	st	Y, r24
				ADCSRA |= (1<<ADSC); //Volver a iniciar ADC
 1c4:	f8 01       	movw	r30, r16
 1c6:	80 81       	ld	r24, Z
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	80 83       	st	Z, r24
 1cc:	8f e0       	ldi	r24, 0x0F	; 15
 1ce:	97 e2       	ldi	r25, 0x27	; 39
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x9c>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0xa2>
 1d6:	00 00       	nop
				_delay_us(250);
				
				//Servo 3 OC1A
				adchleido = fetchADCH(); //Recibo el adch actual
 1d8:	0e 94 6c 00 	call	0xd8	; 0xd8 <fetchADCH>
 1dc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adchleido>
				servo3 = adchleido;
 1e0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adchleido>
 1e4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servo3>
				actualizar_servo(adchleido, 3); //Lo envía al servo 3
 1e8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adchleido>
 1ec:	63 e0       	ldi	r22, 0x03	; 3
 1ee:	0e 94 9f 02 	call	0x53e	; 0x53e <actualizar_servo>
				ADMUX &= 0xF0;
 1f2:	88 81       	ld	r24, Y
 1f4:	80 7f       	andi	r24, 0xF0	; 240
 1f6:	88 83       	st	Y, r24
				ADMUX |=  (1<<MUX2); //Remultiplexado ADC4
 1f8:	88 81       	ld	r24, Y
 1fa:	84 60       	ori	r24, 0x04	; 4
 1fc:	88 83       	st	Y, r24
				ADCSRA |= (1<<ADSC); //Volver a iniciar ADC
 1fe:	f8 01       	movw	r30, r16
 200:	80 81       	ld	r24, Z
 202:	80 64       	ori	r24, 0x40	; 64
 204:	80 83       	st	Z, r24
 206:	8f e0       	ldi	r24, 0x0F	; 15
 208:	97 e2       	ldi	r25, 0x27	; 39
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <main+0xd6>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0xdc>
 210:	00 00       	nop
				_delay_us(250);
				
				//Servo 4 PB0
				adchleido = fetchADCH(); //Recibo el adch actual
 212:	0e 94 6c 00 	call	0xd8	; 0xd8 <fetchADCH>
 216:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adchleido>
				servo4 = adchleido;
 21a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adchleido>
 21e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <servo4>
				actualizar_servomanual(adchleido, 4); //Lo envía al servo 4
 222:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adchleido>
 226:	64 e0       	ldi	r22, 0x04	; 4
 228:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <actualizar_servomanual>
				ADMUX &= 0xF0;
 22c:	88 81       	ld	r24, Y
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	88 83       	st	Y, r24
				ADMUX |= (1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Remultiplexado ADC7
 232:	88 81       	ld	r24, Y
 234:	87 60       	ori	r24, 0x07	; 7
 236:	88 83       	st	Y, r24
				ADCSRA |= (1<<ADSC); //Volver a iniciar ADC
 238:	f8 01       	movw	r30, r16
 23a:	80 81       	ld	r24, Z
 23c:	80 64       	ori	r24, 0x40	; 64
 23e:	80 83       	st	Z, r24
 240:	8f e0       	ldi	r24, 0x0F	; 15
 242:	97 e2       	ldi	r25, 0x27	; 39
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0x110>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x116>
 24a:	00 00       	nop
 24c:	7f cf       	rjmp	.-258    	; 0x14c <main+0x18>
				break;	
				
				
			case MEMORIA: //MODO EEPROM
				//Servo 1 PB3
				actualizar_servomanual(servo1, 1); //Lo envía al servo 1
 24e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <servo1>
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <actualizar_servomanual>
 258:	ef e0       	ldi	r30, 0x0F	; 15
 25a:	f7 e2       	ldi	r31, 0x27	; 39
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <main+0x128>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x12e>
 262:	00 00       	nop
				_delay_us(250);
			
				//Servo 2 OC1B
				actualizar_servo(servo2, 2); //Lo envía al servo 2
 264:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <servo2>
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	0e 94 9f 02 	call	0x53e	; 0x53e <actualizar_servo>
 26e:	8f e0       	ldi	r24, 0x0F	; 15
 270:	97 e2       	ldi	r25, 0x27	; 39
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <main+0x13e>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x144>
 278:	00 00       	nop
				_delay_us(250);
			
				//Servo 3 OC1A
				actualizar_servo(servo3, 3); //Lo envía al servo 3
 27a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servo3>
 27e:	63 e0       	ldi	r22, 0x03	; 3
 280:	0e 94 9f 02 	call	0x53e	; 0x53e <actualizar_servo>
 284:	ef e0       	ldi	r30, 0x0F	; 15
 286:	f7 e2       	ldi	r31, 0x27	; 39
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <main+0x154>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <main+0x15a>
 28e:	00 00       	nop
				_delay_us(250);
			
				//Servo 4 PB0
				actualizar_servomanual(servo4, 4); //Lo envía al servo 4
 290:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <servo4>
 294:	64 e0       	ldi	r22, 0x04	; 4
 296:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <actualizar_servomanual>
 29a:	8f e0       	ldi	r24, 0x0F	; 15
 29c:	97 e2       	ldi	r25, 0x27	; 39
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0x16a>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x170>
 2a4:	00 00       	nop
 2a6:	52 cf       	rjmp	.-348    	; 0x14c <main+0x18>

000002a8 <__vector_5>:
	PCMSK2 = 0;
	PCMSK2 |= (1<<PCINT21) | (1<<PCINT20); //PD4, PD5
} //Setup General

// INTERRUPCIONES
ISR(PCINT2_vect){
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
	uint8_t EstadoPinD = PIND; //Almacenar 
 2ca:	99 b1       	in	r25, 0x09	; 9
	switch(Estado){	
 2cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <__vector_5+0x2e>
 2d4:	6e c0       	rjmp	.+220    	; 0x3b2 <__vector_5+0x10a>
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	09 f4       	brne	.+2      	; 0x2dc <__vector_5+0x34>
 2da:	d2 c0       	rjmp	.+420    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	09 f0       	breq	.+2      	; 0x2e2 <__vector_5+0x3a>
 2e0:	da c0       	rjmp	.+436    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
		// MODIFICACIÓN MANUAL ----------------
		case MANUAL: // PD4, Cambiar estado | PD5, Escribir a memoria 
			if (EstadoPinD & (1<<DDD4)){ //Si PD4 está en 0, cambia de estado
 2e2:	94 ff       	sbrs	r25, 4
 2e4:	0b c0       	rjmp	.+22     	; 0x2fc <__vector_5+0x54>
				Estado = MEMORIA;
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				//LED de estado 1
				PORTC &= 0xF0; //Limpiar nibble de PC0, 1 y 2
 2ec:	88 b1       	in	r24, 0x08	; 8
 2ee:	80 7f       	andi	r24, 0xF0	; 240
 2f0:	88 b9       	out	0x08, r24	; 8
				PORTC |= (1<<DDC1); //Led de Estado 2
 2f2:	88 b1       	in	r24, 0x08	; 8
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	88 b9       	out	0x08, r24	; 8
				Direccion = 0;
 2f8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			}
			if (EstadoPinD & (1<<DDD5)){ //Si PD5 está en 0, escribe la posición a la EEPROM
 2fc:	95 ff       	sbrs	r25, 5
 2fe:	cb c0       	rjmp	.+406    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
				enviarChar('W');
 300:	87 e5       	ldi	r24, 0x57	; 87
 302:	0e 94 43 03 	call	0x686	; 0x686 <enviarChar>
				enviarChar('\n');
 306:	8a e0       	ldi	r24, 0x0A	; 10
 308:	0e 94 43 03 	call	0x686	; 0x686 <enviarChar>
				// Operaciones de Eeprom
				enviarNum(4*Direccion);
 30c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 310:	88 0f       	add	r24, r24
 312:	88 0f       	add	r24, r24
 314:	0e 94 4a 03 	call	0x694	; 0x694 <enviarNum>
				enviarChar('\n');
 318:	8a e0       	ldi	r24, 0x0A	; 10
 31a:	0e 94 43 03 	call	0x686	; 0x686 <enviarChar>
				eeprom_write_byte((uint8_t*) (4*Direccion), servo1);
 31e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <servo1>
 322:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	0e 94 7d 05 	call	0xafa	; 0xafa <eeprom_write_byte>
				enviarNum(servo1);
 334:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <servo1>
 338:	0e 94 4a 03 	call	0x694	; 0x694 <enviarNum>
				eeprom_write_byte((uint8_t*) ((4*Direccion)+1), servo2);
 33c:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <servo2>
 340:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	0e 94 7d 05 	call	0xafa	; 0xafa <eeprom_write_byte>
				enviarNum(servo2);
 354:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <servo2>
 358:	0e 94 4a 03 	call	0x694	; 0x694 <enviarNum>
				eeprom_write_byte((uint8_t*) ((4*Direccion)+2), servo3);
 35c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <servo3>
 360:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	02 96       	adiw	r24, 0x02	; 2
 370:	0e 94 7d 05 	call	0xafa	; 0xafa <eeprom_write_byte>
				enviarNum(servo3);
 374:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servo3>
 378:	0e 94 4a 03 	call	0x694	; 0x694 <enviarNum>
				eeprom_write_byte((uint8_t*) ((4*Direccion)+3), servo4);
 37c:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <servo4>
 380:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	03 96       	adiw	r24, 0x03	; 3
 390:	0e 94 7d 05 	call	0xafa	; 0xafa <eeprom_write_byte>
				enviarNum(servo4);
 394:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <servo4>
 398:	0e 94 4a 03 	call	0x694	; 0x694 <enviarNum>
				Direccion+=1;
 39c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3a0:	8f 5f       	subi	r24, 0xFF	; 255
 3a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				if (Direccion == 4){
 3a6:	84 30       	cpi	r24, 0x04	; 4
 3a8:	09 f0       	breq	.+2      	; 0x3ac <__vector_5+0x104>
 3aa:	75 c0       	rjmp	.+234    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
					Direccion = 0;
 3ac:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 3b0:	72 c0       	rjmp	.+228    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			}
			break;
			
		// LEER DESDE MEMORIA ----------------
		case MEMORIA: // PD4, Cambiar estado | PD5, Leer desde memoria 
			if (EstadoPinD & (1<<DDD4)){ //Si PD4 está en 0, cambia de estado
 3b2:	94 ff       	sbrs	r25, 4
 3b4:	0b c0       	rjmp	.+22     	; 0x3cc <__vector_5+0x124>
				Estado = NUBE;
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				//LED de estado 1
				PORTC &= 0xF0; //Limpiar nibble de PC0, 1 y 2
 3bc:	88 b1       	in	r24, 0x08	; 8
 3be:	80 7f       	andi	r24, 0xF0	; 240
 3c0:	88 b9       	out	0x08, r24	; 8
				PORTC |= (1<<DDC2); //Led de Estado 3
 3c2:	88 b1       	in	r24, 0x08	; 8
 3c4:	84 60       	ori	r24, 0x04	; 4
 3c6:	88 b9       	out	0x08, r24	; 8
				Direccion = 0;
 3c8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			}
			if (EstadoPinD & (1<<DDD5)){ //Si PD5 está en 0, cambia la posición de lectura desde la EEPROM
 3cc:	95 ff       	sbrs	r25, 5
 3ce:	63 c0       	rjmp	.+198    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
				// Operaciones de Eeprom
				enviarChar('R');
 3d0:	82 e5       	ldi	r24, 0x52	; 82
 3d2:	0e 94 43 03 	call	0x686	; 0x686 <enviarChar>
				enviarChar('\n');
 3d6:	8a e0       	ldi	r24, 0x0A	; 10
 3d8:	0e 94 43 03 	call	0x686	; 0x686 <enviarChar>
				enviarNum(4*Direccion);
 3dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3e0:	88 0f       	add	r24, r24
 3e2:	88 0f       	add	r24, r24
 3e4:	0e 94 4a 03 	call	0x694	; 0x694 <enviarNum>
				enviarChar('\n');
 3e8:	8a e0       	ldi	r24, 0x0A	; 10
 3ea:	0e 94 43 03 	call	0x686	; 0x686 <enviarChar>
				servo1 = eeprom_read_byte((uint8_t*)(4*Direccion));
 3ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0e 94 75 05 	call	0xaea	; 0xaea <eeprom_read_byte>
 400:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <servo1>
				enviarNum(servo1);
 404:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <servo1>
 408:	0e 94 4a 03 	call	0x694	; 0x694 <enviarNum>
				servo2 = eeprom_read_byte((uint8_t*)((4*Direccion)+1));
 40c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	0e 94 75 05 	call	0xaea	; 0xaea <eeprom_read_byte>
 420:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <servo2>
				enviarNum(servo2);
 424:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <servo2>
 428:	0e 94 4a 03 	call	0x694	; 0x694 <enviarNum>
				servo3 = eeprom_read_byte((uint8_t*)((4*Direccion)+2));
 42c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	02 96       	adiw	r24, 0x02	; 2
 43c:	0e 94 75 05 	call	0xaea	; 0xaea <eeprom_read_byte>
 440:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servo3>
				enviarNum(servo3);
 444:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servo3>
 448:	0e 94 4a 03 	call	0x694	; 0x694 <enviarNum>
				servo4 = eeprom_read_byte((uint8_t*)((4*Direccion)+3));
 44c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	03 96       	adiw	r24, 0x03	; 3
 45c:	0e 94 75 05 	call	0xaea	; 0xaea <eeprom_read_byte>
 460:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <servo4>
				enviarNum(servo4);
 464:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <servo4>
 468:	0e 94 4a 03 	call	0x694	; 0x694 <enviarNum>
				Direccion+=1;
 46c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 470:	8f 5f       	subi	r24, 0xFF	; 255
 472:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				if (Direccion == 4){
 476:	84 30       	cpi	r24, 0x04	; 4
 478:	71 f4       	brne	.+28     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
					Direccion = 0;
 47a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 47e:	0b c0       	rjmp	.+22     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			}
			break;
		
		// OPERACIONES DE NUBE ----------------
		case NUBE: // PD4, Cambiar estado | PD5, Nada | PD6, Nada
			if (EstadoPinD & (1<<DDD4)){ //Si PD4 está en 0, cambia de estado
 480:	94 ff       	sbrs	r25, 4
 482:	09 c0       	rjmp	.+18     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
				Estado = MANUAL;
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				//LED de estado 1
				PORTC &= 0xF0; //Limpiar nibble de PC0, 1 y 2
 48a:	88 b1       	in	r24, 0x08	; 8
 48c:	80 7f       	andi	r24, 0xF0	; 240
 48e:	88 b9       	out	0x08, r24	; 8
				PORTC |= (1<<DDC0); //Led de Estado 1
 490:	88 b1       	in	r24, 0x08	; 8
 492:	81 60       	ori	r24, 0x01	; 1
 494:	88 b9       	out	0x08, r24	; 8
			}
			break;
	} // SWITCH ESTADOS
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <actualizar_pwm>:
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11); //A1 No inverted | B1 No inverted | Fast con ICR1 Top
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
}

static void actualizar_pwm(uint16_t i, uint8_t NumServo){
	listo_actualizar_pwm = 1;
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <listo_actualizar_pwm>
	while (listo_actualizar_pwm != 0){
 4be:	0c c0       	rjmp	.+24     	; 0x4d8 <actualizar_pwm+0x20>
		//El valor del pulso depende del leído en ADCH
		//El OCR1 modificado depende de NumServo
		if (NumServo==3){
 4c0:	63 30       	cpi	r22, 0x03	; 3
 4c2:	21 f4       	brne	.+8      	; 0x4cc <actualizar_pwm+0x14>
			OCR1AH = (i & 0xFF00) >> 8;
 4c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = (i & 0x00FF);
 4c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		if(NumServo==2){
 4cc:	62 30       	cpi	r22, 0x02	; 2
 4ce:	21 f4       	brne	.+8      	; 0x4d8 <actualizar_pwm+0x20>
			OCR1BH = (i & 0xFF00) >> 8;
 4d0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
			OCR1BL = (i & 0x00FF);
 4d4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
}

static void actualizar_pwm(uint16_t i, uint8_t NumServo){
	listo_actualizar_pwm = 1;
	while (listo_actualizar_pwm != 0){
 4d8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <listo_actualizar_pwm>
 4dc:	21 11       	cpse	r18, r1
 4de:	f0 cf       	rjmp	.-32     	; 0x4c0 <actualizar_pwm+0x8>
		if(NumServo==2){
			OCR1BH = (i & 0xFF00) >> 8;
			OCR1BL = (i & 0x00FF);
		}
	}
}
 4e0:	08 95       	ret

000004e2 <__vector_13>:

#include "PWM1.h"

uint8_t listo_actualizar_pwm = 0;

ISR(TIMER1_OVF_vect){
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
	//Regresa a los 20ms
	listo_actualizar_pwm = 0;
 4ec:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <listo_actualizar_pwm>
}
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <setupPWM1>:


void setupPWM1(void){
	//Interrupciones
	TIMSK1 = 0;
 4fa:	ef e6       	ldi	r30, 0x6F	; 111
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	10 82       	st	Z, r1
	TIMSK1 = (1<<TOIE1); //Overflow
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 83       	st	Z, r24
	
	//Top en ICR1
	ICR1H = (PWMTOP & 0xFF00) >> 8;
 504:	8c e9       	ldi	r24, 0x9C	; 156
 506:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = (PWMTOP & 0x00FF);
 50a:	8f e3       	ldi	r24, 0x3F	; 63
 50c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	//Inicializar servo al minimo
	OCR1AH = (SERVOMIN & 0xFF00) >> 8;
 510:	93 e0       	ldi	r25, 0x03	; 3
 512:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = (SERVOMIN & 0x00FF);
 516:	80 ef       	ldi	r24, 0xF0	; 240
 518:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	OCR1BH = (SERVOMIN & 0xFF00) >> 8;
 51c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
	OCR1BL = (SERVOMIN & 0x00FF);
 520:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	//Forma, modo, prescaler
	TCCR1A = 0;
 524:	a0 e8       	ldi	r26, 0x80	; 128
 526:	b0 e0       	ldi	r27, 0x00	; 0
 528:	1c 92       	st	X, r1
	TCCR1B = 0;
 52a:	e1 e8       	ldi	r30, 0x81	; 129
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	10 82       	st	Z, r1
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11); //A1 No inverted | B1 No inverted | Fast con ICR1 Top
 530:	8c 91       	ld	r24, X
 532:	82 6a       	ori	r24, 0xA2	; 162
 534:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
 536:	80 81       	ld	r24, Z
 538:	8a 61       	ori	r24, 0x1A	; 26
 53a:	80 83       	st	Z, r24
 53c:	08 95       	ret

0000053e <actualizar_servo>:
			OCR1BL = (i & 0x00FF);
		}
	}
}

void actualizar_servo(uint8_t adchleido, uint8_t servo_a_modificar){
 53e:	cf 93       	push	r28
 540:	c6 2f       	mov	r28, r22
	//Conversión de lectura de ADC a pulso en PWM
	float razon = (float)adchleido/(float)255;
 542:	68 2f       	mov	r22, r24
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__floatunsisf>
 54e:	20 e0       	ldi	r18, 0x00	; 0
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	4f e7       	ldi	r20, 0x7F	; 127
 554:	53 e4       	ldi	r21, 0x43	; 67
 556:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__divsf3>
	razon = (((float)SERVOMAX - (float)SERVOMIN)*razon) + (float)SERVOMIN;
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 ed       	ldi	r19, 0xD0	; 208
 55e:	4c e6       	ldi	r20, 0x6C	; 108
 560:	55 e4       	ldi	r21, 0x45	; 69
 562:	0e 94 08 05 	call	0xa10	; 0xa10 <__mulsf3>
 566:	20 e0       	ldi	r18, 0x00	; 0
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	4c e7       	ldi	r20, 0x7C	; 124
 56c:	54 e4       	ldi	r21, 0x44	; 68
 56e:	0e 94 6d 03 	call	0x6da	; 0x6da <__addsf3>
	uint16_t valorservo = (uint16_t)razon;
 572:	0e 94 4b 04 	call	0x896	; 0x896 <__fixunssfsi>
 576:	dc 01       	movw	r26, r24
 578:	cb 01       	movw	r24, r22
	actualizar_pwm(valorservo, servo_a_modificar);
 57a:	6c 2f       	mov	r22, r28
 57c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <actualizar_pwm>
 580:	cf 91       	pop	r28
 582:	08 95       	ret

00000584 <setupTimer2>:
uint16_t limite_contador1 = 0;
uint16_t limite_contador2 = 0;

void setupTimer2(void){
	//Interrupciones
	TIMSK2 = 0;
 584:	e0 e7       	ldi	r30, 0x70	; 112
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	10 82       	st	Z, r1
	TIMSK2 = (1<<TOIE2); //Overflow
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	80 83       	st	Z, r24
	
	//Forma, modo, prescaler
	TCCR2A = 0;
 58e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 592:	e1 eb       	ldi	r30, 0xB1	; 177
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	10 82       	st	Z, r1
	TCCR2B |= (1<<CS21); //Operación temporizador | Prescaler 8
 598:	80 81       	ld	r24, Z
 59a:	82 60       	ori	r24, 0x02	; 2
 59c:	80 83       	st	Z, r24
	
	//Inicial en el valor límite
	TCNT2 = TIMERTOP;
 59e:	82 ef       	ldi	r24, 0xF2	; 242
 5a0:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 5a4:	08 95       	ret

000005a6 <actualizar_servomanual>:
}

void actualizar_servomanual(uint8_t adchleido, uint8_t servo_a_modificar){
	if (servo_a_modificar == 1){
 5a6:	61 30       	cpi	r22, 0x01	; 1
 5a8:	31 f4       	brne	.+12     	; 0x5b6 <actualizar_servomanual+0x10>
		limite_contador1 = adchleido; //Servo 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <limite_contador1+0x1>
 5b0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <limite_contador1>
 5b4:	08 95       	ret
	}else{
		limite_contador2 = adchleido; //Servo 4
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <limite_contador2+0x1>
 5bc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <limite_contador2>
 5c0:	08 95       	ret

000005c2 <__vector_9>:
	}
}

ISR(TIMER2_OVF_vect){
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	2f 93       	push	r18
 5ce:	3f 93       	push	r19
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
	//Cuando llega al tope pasan .007ms entonces se actualiza la señal en PB3 o PB0
	//dependiendo de la comparación de contadores
	
	//Servo 1
	if (contador_pwm >= limite_contador1){
 5d4:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <contador_pwm>
 5d8:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <contador_pwm+0x1>
 5dc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <limite_contador1>
 5e0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <limite_contador1+0x1>
 5e4:	28 17       	cp	r18, r24
 5e6:	39 07       	cpc	r19, r25
 5e8:	20 f0       	brcs	.+8      	; 0x5f2 <__vector_9+0x30>
		PORTB &= 0xF7;
 5ea:	85 b1       	in	r24, 0x05	; 5
 5ec:	87 7f       	andi	r24, 0xF7	; 247
 5ee:	85 b9       	out	0x05, r24	; 5
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <__vector_9+0x36>
	}
	else{
		PORTB |= 0x08;
 5f2:	85 b1       	in	r24, 0x05	; 5
 5f4:	88 60       	ori	r24, 0x08	; 8
 5f6:	85 b9       	out	0x05, r24	; 5
	}
	
	//Servo 4
	if (contador_pwm >= limite_contador2){
 5f8:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <contador_pwm>
 5fc:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <contador_pwm+0x1>
 600:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <limite_contador2>
 604:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <limite_contador2+0x1>
 608:	28 17       	cp	r18, r24
 60a:	39 07       	cpc	r19, r25
 60c:	20 f0       	brcs	.+8      	; 0x616 <__vector_9+0x54>
		PORTB &= 0xFE;
 60e:	85 b1       	in	r24, 0x05	; 5
 610:	8e 7f       	andi	r24, 0xFE	; 254
 612:	85 b9       	out	0x05, r24	; 5
 614:	03 c0       	rjmp	.+6      	; 0x61c <__vector_9+0x5a>
	}
	else{
		PORTB |= 0x01;
 616:	85 b1       	in	r24, 0x05	; 5
 618:	81 60       	ori	r24, 0x01	; 1
 61a:	85 b9       	out	0x05, r24	; 5
	}
	
	contador_pwm += 1;
 61c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <contador_pwm>
 620:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <contador_pwm+0x1>
 624:	01 96       	adiw	r24, 0x01	; 1
 626:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <contador_pwm+0x1>
 62a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <contador_pwm>
	TCNT2 = TIMERTOP;
 62e:	82 ef       	ldi	r24, 0xF2	; 242
 630:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	//Limite
	if (contador_pwm > MANUALTOP){
 634:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <contador_pwm>
 638:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <contador_pwm+0x1>
 63c:	8b 32       	cpi	r24, 0x2B	; 43
 63e:	9b 40       	sbci	r25, 0x0B	; 11
 640:	20 f0       	brcs	.+8      	; 0x64a <__vector_9+0x88>
		contador_pwm = 0;
 642:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <contador_pwm+0x1>
 646:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <contador_pwm>
	}
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	3f 91       	pop	r19
 650:	2f 91       	pop	r18
 652:	0f 90       	pop	r0
 654:	0f be       	out	0x3f, r0	; 63
 656:	0f 90       	pop	r0
 658:	1f 90       	pop	r1
 65a:	18 95       	reti

0000065c <setupUART>:
#include "UART.h"


void setupUART(void){
	//No necesito nada de este registro
	UCSR0A = 0;
 65c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Rx int. | Tx En. | Rx en.
	UCSR0B = 0;
 660:	e1 ec       	ldi	r30, 0xC1	; 193
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 666:	80 81       	ld	r24, Z
 668:	88 69       	ori	r24, 0x98	; 152
 66a:	80 83       	st	Z, r24
	
	//Async | No Pariety | 1 stop | 8 data
	UCSR0C = 0;
 66c:	e2 ec       	ldi	r30, 0xC2	; 194
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 672:	80 81       	ld	r24, Z
 674:	86 60       	ori	r24, 0x06	; 6
 676:	80 83       	st	Z, r24
	
	//UDR0 9600
	UBRR0 = 103;
 678:	87 e6       	ldi	r24, 0x67	; 103
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 680:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 684:	08 95       	ret

00000686 <enviarChar>:
	
}

void enviarChar(char Caracter){
	while (!(UCSR0A & (1<<UDRE0))); //Hasta que esté vacío puedo enviar el dato
 686:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 68a:	95 ff       	sbrs	r25, 5
 68c:	fc cf       	rjmp	.-8      	; 0x686 <enviarChar>
	UDR0 = Caracter;
 68e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 692:	08 95       	ret

00000694 <enviarNum>:
}

void enviarNum(uint8_t adchleido){
 694:	cf 93       	push	r28
 696:	c8 2f       	mov	r28, r24
	//Envío de caracter por caracter a UART
	uint8_t c = 0; //Centenas
 698:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t d = 0; //Decenas
	uint8_t u = 0; //Unidades
	while(adchleido > 99){
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <enviarNum+0xc>
		c++;
 69c:	8f 5f       	subi	r24, 0xFF	; 255
		adchleido -= 100;
 69e:	c4 56       	subi	r28, 0x64	; 100
void enviarNum(uint8_t adchleido){
	//Envío de caracter por caracter a UART
	uint8_t c = 0; //Centenas
	uint8_t d = 0; //Decenas
	uint8_t u = 0; //Unidades
	while(adchleido > 99){
 6a0:	c4 36       	cpi	r28, 0x64	; 100
 6a2:	e0 f7       	brcc	.-8      	; 0x69c <enviarNum+0x8>
		c++;
		adchleido -= 100;
	}
	enviarChar((char) c+48);
 6a4:	80 5d       	subi	r24, 0xD0	; 208
 6a6:	0e 94 43 03 	call	0x686	; 0x686 <enviarChar>
}

void enviarNum(uint8_t adchleido){
	//Envío de caracter por caracter a UART
	uint8_t c = 0; //Centenas
	uint8_t d = 0; //Decenas
 6aa:	80 e0       	ldi	r24, 0x00	; 0
	while(adchleido > 99){
		c++;
		adchleido -= 100;
	}
	enviarChar((char) c+48);
	while(adchleido > 9){
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <enviarNum+0x1e>
		d++;
 6ae:	8f 5f       	subi	r24, 0xFF	; 255
		adchleido -= 10;
 6b0:	ca 50       	subi	r28, 0x0A	; 10
	while(adchleido > 99){
		c++;
		adchleido -= 100;
	}
	enviarChar((char) c+48);
	while(adchleido > 9){
 6b2:	ca 30       	cpi	r28, 0x0A	; 10
 6b4:	e0 f7       	brcc	.-8      	; 0x6ae <enviarNum+0x1a>
		d++;
		adchleido -= 10;
	}
	enviarChar((char) d+48);
 6b6:	80 5d       	subi	r24, 0xD0	; 208
 6b8:	0e 94 43 03 	call	0x686	; 0x686 <enviarChar>

void enviarNum(uint8_t adchleido){
	//Envío de caracter por caracter a UART
	uint8_t c = 0; //Centenas
	uint8_t d = 0; //Decenas
	uint8_t u = 0; //Unidades
 6bc:	80 e0       	ldi	r24, 0x00	; 0
	while(adchleido > 9){
		d++;
		adchleido -= 10;
	}
	enviarChar((char) d+48);
	while(adchleido != 0){
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <enviarNum+0x30>
		u++;
 6c0:	8f 5f       	subi	r24, 0xFF	; 255
		adchleido -= 1;
 6c2:	c1 50       	subi	r28, 0x01	; 1
	while(adchleido > 9){
		d++;
		adchleido -= 10;
	}
	enviarChar((char) d+48);
	while(adchleido != 0){
 6c4:	c1 11       	cpse	r28, r1
 6c6:	fc cf       	rjmp	.-8      	; 0x6c0 <enviarNum+0x2c>
		u++;
		adchleido -= 1;
	}
	enviarChar((char) u+48);
 6c8:	80 5d       	subi	r24, 0xD0	; 208
 6ca:	0e 94 43 03 	call	0x686	; 0x686 <enviarChar>
	enviarChar('\n');
 6ce:	8a e0       	ldi	r24, 0x0A	; 10
 6d0:	0e 94 43 03 	call	0x686	; 0x686 <enviarChar>
 6d4:	cf 91       	pop	r28
 6d6:	08 95       	ret

000006d8 <__subsf3>:
 6d8:	50 58       	subi	r21, 0x80	; 128

000006da <__addsf3>:
 6da:	bb 27       	eor	r27, r27
 6dc:	aa 27       	eor	r26, r26
 6de:	0e 94 84 03 	call	0x708	; 0x708 <__addsf3x>
 6e2:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_round>
 6e6:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_pscA>
 6ea:	38 f0       	brcs	.+14     	; 0x6fa <__addsf3+0x20>
 6ec:	0e 94 c7 04 	call	0x98e	; 0x98e <__fp_pscB>
 6f0:	20 f0       	brcs	.+8      	; 0x6fa <__addsf3+0x20>
 6f2:	39 f4       	brne	.+14     	; 0x702 <__addsf3+0x28>
 6f4:	9f 3f       	cpi	r25, 0xFF	; 255
 6f6:	19 f4       	brne	.+6      	; 0x6fe <__addsf3+0x24>
 6f8:	26 f4       	brtc	.+8      	; 0x702 <__addsf3+0x28>
 6fa:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_nan>
 6fe:	0e f4       	brtc	.+2      	; 0x702 <__addsf3+0x28>
 700:	e0 95       	com	r30
 702:	e7 fb       	bst	r30, 7
 704:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_inf>

00000708 <__addsf3x>:
 708:	e9 2f       	mov	r30, r25
 70a:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_split3>
 70e:	58 f3       	brcs	.-42     	; 0x6e6 <__addsf3+0xc>
 710:	ba 17       	cp	r27, r26
 712:	62 07       	cpc	r22, r18
 714:	73 07       	cpc	r23, r19
 716:	84 07       	cpc	r24, r20
 718:	95 07       	cpc	r25, r21
 71a:	20 f0       	brcs	.+8      	; 0x724 <__addsf3x+0x1c>
 71c:	79 f4       	brne	.+30     	; 0x73c <__addsf3x+0x34>
 71e:	a6 f5       	brtc	.+104    	; 0x788 <__addsf3x+0x80>
 720:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_zero>
 724:	0e f4       	brtc	.+2      	; 0x728 <__addsf3x+0x20>
 726:	e0 95       	com	r30
 728:	0b 2e       	mov	r0, r27
 72a:	ba 2f       	mov	r27, r26
 72c:	a0 2d       	mov	r26, r0
 72e:	0b 01       	movw	r0, r22
 730:	b9 01       	movw	r22, r18
 732:	90 01       	movw	r18, r0
 734:	0c 01       	movw	r0, r24
 736:	ca 01       	movw	r24, r20
 738:	a0 01       	movw	r20, r0
 73a:	11 24       	eor	r1, r1
 73c:	ff 27       	eor	r31, r31
 73e:	59 1b       	sub	r21, r25
 740:	99 f0       	breq	.+38     	; 0x768 <__addsf3x+0x60>
 742:	59 3f       	cpi	r21, 0xF9	; 249
 744:	50 f4       	brcc	.+20     	; 0x75a <__addsf3x+0x52>
 746:	50 3e       	cpi	r21, 0xE0	; 224
 748:	68 f1       	brcs	.+90     	; 0x7a4 <__addsf3x+0x9c>
 74a:	1a 16       	cp	r1, r26
 74c:	f0 40       	sbci	r31, 0x00	; 0
 74e:	a2 2f       	mov	r26, r18
 750:	23 2f       	mov	r18, r19
 752:	34 2f       	mov	r19, r20
 754:	44 27       	eor	r20, r20
 756:	58 5f       	subi	r21, 0xF8	; 248
 758:	f3 cf       	rjmp	.-26     	; 0x740 <__addsf3x+0x38>
 75a:	46 95       	lsr	r20
 75c:	37 95       	ror	r19
 75e:	27 95       	ror	r18
 760:	a7 95       	ror	r26
 762:	f0 40       	sbci	r31, 0x00	; 0
 764:	53 95       	inc	r21
 766:	c9 f7       	brne	.-14     	; 0x75a <__addsf3x+0x52>
 768:	7e f4       	brtc	.+30     	; 0x788 <__addsf3x+0x80>
 76a:	1f 16       	cp	r1, r31
 76c:	ba 0b       	sbc	r27, r26
 76e:	62 0b       	sbc	r22, r18
 770:	73 0b       	sbc	r23, r19
 772:	84 0b       	sbc	r24, r20
 774:	ba f0       	brmi	.+46     	; 0x7a4 <__addsf3x+0x9c>
 776:	91 50       	subi	r25, 0x01	; 1
 778:	a1 f0       	breq	.+40     	; 0x7a2 <__addsf3x+0x9a>
 77a:	ff 0f       	add	r31, r31
 77c:	bb 1f       	adc	r27, r27
 77e:	66 1f       	adc	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	88 1f       	adc	r24, r24
 784:	c2 f7       	brpl	.-16     	; 0x776 <__addsf3x+0x6e>
 786:	0e c0       	rjmp	.+28     	; 0x7a4 <__addsf3x+0x9c>
 788:	ba 0f       	add	r27, r26
 78a:	62 1f       	adc	r22, r18
 78c:	73 1f       	adc	r23, r19
 78e:	84 1f       	adc	r24, r20
 790:	48 f4       	brcc	.+18     	; 0x7a4 <__addsf3x+0x9c>
 792:	87 95       	ror	r24
 794:	77 95       	ror	r23
 796:	67 95       	ror	r22
 798:	b7 95       	ror	r27
 79a:	f7 95       	ror	r31
 79c:	9e 3f       	cpi	r25, 0xFE	; 254
 79e:	08 f0       	brcs	.+2      	; 0x7a2 <__addsf3x+0x9a>
 7a0:	b0 cf       	rjmp	.-160    	; 0x702 <__addsf3+0x28>
 7a2:	93 95       	inc	r25
 7a4:	88 0f       	add	r24, r24
 7a6:	08 f0       	brcs	.+2      	; 0x7aa <__addsf3x+0xa2>
 7a8:	99 27       	eor	r25, r25
 7aa:	ee 0f       	add	r30, r30
 7ac:	97 95       	ror	r25
 7ae:	87 95       	ror	r24
 7b0:	08 95       	ret

000007b2 <__divsf3>:
 7b2:	0e 94 ed 03 	call	0x7da	; 0x7da <__divsf3x>
 7b6:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_round>
 7ba:	0e 94 c7 04 	call	0x98e	; 0x98e <__fp_pscB>
 7be:	58 f0       	brcs	.+22     	; 0x7d6 <__divsf3+0x24>
 7c0:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_pscA>
 7c4:	40 f0       	brcs	.+16     	; 0x7d6 <__divsf3+0x24>
 7c6:	29 f4       	brne	.+10     	; 0x7d2 <__divsf3+0x20>
 7c8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ca:	29 f0       	breq	.+10     	; 0x7d6 <__divsf3+0x24>
 7cc:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_inf>
 7d0:	51 11       	cpse	r21, r1
 7d2:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_szero>
 7d6:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_nan>

000007da <__divsf3x>:
 7da:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_split3>
 7de:	68 f3       	brcs	.-38     	; 0x7ba <__divsf3+0x8>

000007e0 <__divsf3_pse>:
 7e0:	99 23       	and	r25, r25
 7e2:	b1 f3       	breq	.-20     	; 0x7d0 <__divsf3+0x1e>
 7e4:	55 23       	and	r21, r21
 7e6:	91 f3       	breq	.-28     	; 0x7cc <__divsf3+0x1a>
 7e8:	95 1b       	sub	r25, r21
 7ea:	55 0b       	sbc	r21, r21
 7ec:	bb 27       	eor	r27, r27
 7ee:	aa 27       	eor	r26, r26
 7f0:	62 17       	cp	r22, r18
 7f2:	73 07       	cpc	r23, r19
 7f4:	84 07       	cpc	r24, r20
 7f6:	38 f0       	brcs	.+14     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7f8:	9f 5f       	subi	r25, 0xFF	; 255
 7fa:	5f 4f       	sbci	r21, 0xFF	; 255
 7fc:	22 0f       	add	r18, r18
 7fe:	33 1f       	adc	r19, r19
 800:	44 1f       	adc	r20, r20
 802:	aa 1f       	adc	r26, r26
 804:	a9 f3       	breq	.-22     	; 0x7f0 <__divsf3_pse+0x10>
 806:	35 d0       	rcall	.+106    	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 808:	0e 2e       	mov	r0, r30
 80a:	3a f0       	brmi	.+14     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80c:	e0 e8       	ldi	r30, 0x80	; 128
 80e:	32 d0       	rcall	.+100    	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 810:	91 50       	subi	r25, 0x01	; 1
 812:	50 40       	sbci	r21, 0x00	; 0
 814:	e6 95       	lsr	r30
 816:	00 1c       	adc	r0, r0
 818:	ca f7       	brpl	.-14     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 81a:	2b d0       	rcall	.+86     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 81c:	fe 2f       	mov	r31, r30
 81e:	29 d0       	rcall	.+82     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 820:	66 0f       	add	r22, r22
 822:	77 1f       	adc	r23, r23
 824:	88 1f       	adc	r24, r24
 826:	bb 1f       	adc	r27, r27
 828:	26 17       	cp	r18, r22
 82a:	37 07       	cpc	r19, r23
 82c:	48 07       	cpc	r20, r24
 82e:	ab 07       	cpc	r26, r27
 830:	b0 e8       	ldi	r27, 0x80	; 128
 832:	09 f0       	breq	.+2      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 834:	bb 0b       	sbc	r27, r27
 836:	80 2d       	mov	r24, r0
 838:	bf 01       	movw	r22, r30
 83a:	ff 27       	eor	r31, r31
 83c:	93 58       	subi	r25, 0x83	; 131
 83e:	5f 4f       	sbci	r21, 0xFF	; 255
 840:	3a f0       	brmi	.+14     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 842:	9e 3f       	cpi	r25, 0xFE	; 254
 844:	51 05       	cpc	r21, r1
 846:	78 f0       	brcs	.+30     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 848:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_inf>
 84c:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_szero>
 850:	5f 3f       	cpi	r21, 0xFF	; 255
 852:	e4 f3       	brlt	.-8      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 854:	98 3e       	cpi	r25, 0xE8	; 232
 856:	d4 f3       	brlt	.-12     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 858:	86 95       	lsr	r24
 85a:	77 95       	ror	r23
 85c:	67 95       	ror	r22
 85e:	b7 95       	ror	r27
 860:	f7 95       	ror	r31
 862:	9f 5f       	subi	r25, 0xFF	; 255
 864:	c9 f7       	brne	.-14     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 866:	88 0f       	add	r24, r24
 868:	91 1d       	adc	r25, r1
 86a:	96 95       	lsr	r25
 86c:	87 95       	ror	r24
 86e:	97 f9       	bld	r25, 7
 870:	08 95       	ret
 872:	e1 e0       	ldi	r30, 0x01	; 1
 874:	66 0f       	add	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	88 1f       	adc	r24, r24
 87a:	bb 1f       	adc	r27, r27
 87c:	62 17       	cp	r22, r18
 87e:	73 07       	cpc	r23, r19
 880:	84 07       	cpc	r24, r20
 882:	ba 07       	cpc	r27, r26
 884:	20 f0       	brcs	.+8      	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 886:	62 1b       	sub	r22, r18
 888:	73 0b       	sbc	r23, r19
 88a:	84 0b       	sbc	r24, r20
 88c:	ba 0b       	sbc	r27, r26
 88e:	ee 1f       	adc	r30, r30
 890:	88 f7       	brcc	.-30     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 892:	e0 95       	com	r30
 894:	08 95       	ret

00000896 <__fixunssfsi>:
 896:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_splitA>
 89a:	88 f0       	brcs	.+34     	; 0x8be <__fixunssfsi+0x28>
 89c:	9f 57       	subi	r25, 0x7F	; 127
 89e:	98 f0       	brcs	.+38     	; 0x8c6 <__fixunssfsi+0x30>
 8a0:	b9 2f       	mov	r27, r25
 8a2:	99 27       	eor	r25, r25
 8a4:	b7 51       	subi	r27, 0x17	; 23
 8a6:	b0 f0       	brcs	.+44     	; 0x8d4 <__fixunssfsi+0x3e>
 8a8:	e1 f0       	breq	.+56     	; 0x8e2 <__fixunssfsi+0x4c>
 8aa:	66 0f       	add	r22, r22
 8ac:	77 1f       	adc	r23, r23
 8ae:	88 1f       	adc	r24, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	1a f0       	brmi	.+6      	; 0x8ba <__fixunssfsi+0x24>
 8b4:	ba 95       	dec	r27
 8b6:	c9 f7       	brne	.-14     	; 0x8aa <__fixunssfsi+0x14>
 8b8:	14 c0       	rjmp	.+40     	; 0x8e2 <__fixunssfsi+0x4c>
 8ba:	b1 30       	cpi	r27, 0x01	; 1
 8bc:	91 f0       	breq	.+36     	; 0x8e2 <__fixunssfsi+0x4c>
 8be:	0e 94 01 05 	call	0xa02	; 0xa02 <__fp_zero>
 8c2:	b1 e0       	ldi	r27, 0x01	; 1
 8c4:	08 95       	ret
 8c6:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_zero>
 8ca:	67 2f       	mov	r22, r23
 8cc:	78 2f       	mov	r23, r24
 8ce:	88 27       	eor	r24, r24
 8d0:	b8 5f       	subi	r27, 0xF8	; 248
 8d2:	39 f0       	breq	.+14     	; 0x8e2 <__fixunssfsi+0x4c>
 8d4:	b9 3f       	cpi	r27, 0xF9	; 249
 8d6:	cc f3       	brlt	.-14     	; 0x8ca <__fixunssfsi+0x34>
 8d8:	86 95       	lsr	r24
 8da:	77 95       	ror	r23
 8dc:	67 95       	ror	r22
 8de:	b3 95       	inc	r27
 8e0:	d9 f7       	brne	.-10     	; 0x8d8 <__fixunssfsi+0x42>
 8e2:	3e f4       	brtc	.+14     	; 0x8f2 <__fixunssfsi+0x5c>
 8e4:	90 95       	com	r25
 8e6:	80 95       	com	r24
 8e8:	70 95       	com	r23
 8ea:	61 95       	neg	r22
 8ec:	7f 4f       	sbci	r23, 0xFF	; 255
 8ee:	8f 4f       	sbci	r24, 0xFF	; 255
 8f0:	9f 4f       	sbci	r25, 0xFF	; 255
 8f2:	08 95       	ret

000008f4 <__floatunsisf>:
 8f4:	e8 94       	clt
 8f6:	09 c0       	rjmp	.+18     	; 0x90a <__stack+0xb>

000008f8 <__floatsisf>:
 8f8:	97 fb       	bst	r25, 7
 8fa:	3e f4       	brtc	.+14     	; 0x90a <__stack+0xb>
 8fc:	90 95       	com	r25
 8fe:	80 95       	com	r24
 900:	70 95       	com	r23
 902:	61 95       	neg	r22
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	8f 4f       	sbci	r24, 0xFF	; 255
 908:	9f 4f       	sbci	r25, 0xFF	; 255
 90a:	99 23       	and	r25, r25
 90c:	a9 f0       	breq	.+42     	; 0x938 <__stack+0x39>
 90e:	f9 2f       	mov	r31, r25
 910:	96 e9       	ldi	r25, 0x96	; 150
 912:	bb 27       	eor	r27, r27
 914:	93 95       	inc	r25
 916:	f6 95       	lsr	r31
 918:	87 95       	ror	r24
 91a:	77 95       	ror	r23
 91c:	67 95       	ror	r22
 91e:	b7 95       	ror	r27
 920:	f1 11       	cpse	r31, r1
 922:	f8 cf       	rjmp	.-16     	; 0x914 <__stack+0x15>
 924:	fa f4       	brpl	.+62     	; 0x964 <__stack+0x65>
 926:	bb 0f       	add	r27, r27
 928:	11 f4       	brne	.+4      	; 0x92e <__stack+0x2f>
 92a:	60 ff       	sbrs	r22, 0
 92c:	1b c0       	rjmp	.+54     	; 0x964 <__stack+0x65>
 92e:	6f 5f       	subi	r22, 0xFF	; 255
 930:	7f 4f       	sbci	r23, 0xFF	; 255
 932:	8f 4f       	sbci	r24, 0xFF	; 255
 934:	9f 4f       	sbci	r25, 0xFF	; 255
 936:	16 c0       	rjmp	.+44     	; 0x964 <__stack+0x65>
 938:	88 23       	and	r24, r24
 93a:	11 f0       	breq	.+4      	; 0x940 <__stack+0x41>
 93c:	96 e9       	ldi	r25, 0x96	; 150
 93e:	11 c0       	rjmp	.+34     	; 0x962 <__stack+0x63>
 940:	77 23       	and	r23, r23
 942:	21 f0       	breq	.+8      	; 0x94c <__stack+0x4d>
 944:	9e e8       	ldi	r25, 0x8E	; 142
 946:	87 2f       	mov	r24, r23
 948:	76 2f       	mov	r23, r22
 94a:	05 c0       	rjmp	.+10     	; 0x956 <__stack+0x57>
 94c:	66 23       	and	r22, r22
 94e:	71 f0       	breq	.+28     	; 0x96c <__stack+0x6d>
 950:	96 e8       	ldi	r25, 0x86	; 134
 952:	86 2f       	mov	r24, r22
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	2a f0       	brmi	.+10     	; 0x964 <__stack+0x65>
 95a:	9a 95       	dec	r25
 95c:	66 0f       	add	r22, r22
 95e:	77 1f       	adc	r23, r23
 960:	88 1f       	adc	r24, r24
 962:	da f7       	brpl	.-10     	; 0x95a <__stack+0x5b>
 964:	88 0f       	add	r24, r24
 966:	96 95       	lsr	r25
 968:	87 95       	ror	r24
 96a:	97 f9       	bld	r25, 7
 96c:	08 95       	ret

0000096e <__fp_inf>:
 96e:	97 f9       	bld	r25, 7
 970:	9f 67       	ori	r25, 0x7F	; 127
 972:	80 e8       	ldi	r24, 0x80	; 128
 974:	70 e0       	ldi	r23, 0x00	; 0
 976:	60 e0       	ldi	r22, 0x00	; 0
 978:	08 95       	ret

0000097a <__fp_nan>:
 97a:	9f ef       	ldi	r25, 0xFF	; 255
 97c:	80 ec       	ldi	r24, 0xC0	; 192
 97e:	08 95       	ret

00000980 <__fp_pscA>:
 980:	00 24       	eor	r0, r0
 982:	0a 94       	dec	r0
 984:	16 16       	cp	r1, r22
 986:	17 06       	cpc	r1, r23
 988:	18 06       	cpc	r1, r24
 98a:	09 06       	cpc	r0, r25
 98c:	08 95       	ret

0000098e <__fp_pscB>:
 98e:	00 24       	eor	r0, r0
 990:	0a 94       	dec	r0
 992:	12 16       	cp	r1, r18
 994:	13 06       	cpc	r1, r19
 996:	14 06       	cpc	r1, r20
 998:	05 06       	cpc	r0, r21
 99a:	08 95       	ret

0000099c <__fp_round>:
 99c:	09 2e       	mov	r0, r25
 99e:	03 94       	inc	r0
 9a0:	00 0c       	add	r0, r0
 9a2:	11 f4       	brne	.+4      	; 0x9a8 <__fp_round+0xc>
 9a4:	88 23       	and	r24, r24
 9a6:	52 f0       	brmi	.+20     	; 0x9bc <__fp_round+0x20>
 9a8:	bb 0f       	add	r27, r27
 9aa:	40 f4       	brcc	.+16     	; 0x9bc <__fp_round+0x20>
 9ac:	bf 2b       	or	r27, r31
 9ae:	11 f4       	brne	.+4      	; 0x9b4 <__fp_round+0x18>
 9b0:	60 ff       	sbrs	r22, 0
 9b2:	04 c0       	rjmp	.+8      	; 0x9bc <__fp_round+0x20>
 9b4:	6f 5f       	subi	r22, 0xFF	; 255
 9b6:	7f 4f       	sbci	r23, 0xFF	; 255
 9b8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ba:	9f 4f       	sbci	r25, 0xFF	; 255
 9bc:	08 95       	ret

000009be <__fp_split3>:
 9be:	57 fd       	sbrc	r21, 7
 9c0:	90 58       	subi	r25, 0x80	; 128
 9c2:	44 0f       	add	r20, r20
 9c4:	55 1f       	adc	r21, r21
 9c6:	59 f0       	breq	.+22     	; 0x9de <__fp_splitA+0x10>
 9c8:	5f 3f       	cpi	r21, 0xFF	; 255
 9ca:	71 f0       	breq	.+28     	; 0x9e8 <__fp_splitA+0x1a>
 9cc:	47 95       	ror	r20

000009ce <__fp_splitA>:
 9ce:	88 0f       	add	r24, r24
 9d0:	97 fb       	bst	r25, 7
 9d2:	99 1f       	adc	r25, r25
 9d4:	61 f0       	breq	.+24     	; 0x9ee <__fp_splitA+0x20>
 9d6:	9f 3f       	cpi	r25, 0xFF	; 255
 9d8:	79 f0       	breq	.+30     	; 0x9f8 <__fp_splitA+0x2a>
 9da:	87 95       	ror	r24
 9dc:	08 95       	ret
 9de:	12 16       	cp	r1, r18
 9e0:	13 06       	cpc	r1, r19
 9e2:	14 06       	cpc	r1, r20
 9e4:	55 1f       	adc	r21, r21
 9e6:	f2 cf       	rjmp	.-28     	; 0x9cc <__fp_split3+0xe>
 9e8:	46 95       	lsr	r20
 9ea:	f1 df       	rcall	.-30     	; 0x9ce <__fp_splitA>
 9ec:	08 c0       	rjmp	.+16     	; 0x9fe <__fp_splitA+0x30>
 9ee:	16 16       	cp	r1, r22
 9f0:	17 06       	cpc	r1, r23
 9f2:	18 06       	cpc	r1, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	f1 cf       	rjmp	.-30     	; 0x9da <__fp_splitA+0xc>
 9f8:	86 95       	lsr	r24
 9fa:	71 05       	cpc	r23, r1
 9fc:	61 05       	cpc	r22, r1
 9fe:	08 94       	sec
 a00:	08 95       	ret

00000a02 <__fp_zero>:
 a02:	e8 94       	clt

00000a04 <__fp_szero>:
 a04:	bb 27       	eor	r27, r27
 a06:	66 27       	eor	r22, r22
 a08:	77 27       	eor	r23, r23
 a0a:	cb 01       	movw	r24, r22
 a0c:	97 f9       	bld	r25, 7
 a0e:	08 95       	ret

00000a10 <__mulsf3>:
 a10:	0e 94 1b 05 	call	0xa36	; 0xa36 <__mulsf3x>
 a14:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_round>
 a18:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_pscA>
 a1c:	38 f0       	brcs	.+14     	; 0xa2c <__mulsf3+0x1c>
 a1e:	0e 94 c7 04 	call	0x98e	; 0x98e <__fp_pscB>
 a22:	20 f0       	brcs	.+8      	; 0xa2c <__mulsf3+0x1c>
 a24:	95 23       	and	r25, r21
 a26:	11 f0       	breq	.+4      	; 0xa2c <__mulsf3+0x1c>
 a28:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_inf>
 a2c:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_nan>
 a30:	11 24       	eor	r1, r1
 a32:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_szero>

00000a36 <__mulsf3x>:
 a36:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_split3>
 a3a:	70 f3       	brcs	.-36     	; 0xa18 <__mulsf3+0x8>

00000a3c <__mulsf3_pse>:
 a3c:	95 9f       	mul	r25, r21
 a3e:	c1 f3       	breq	.-16     	; 0xa30 <__mulsf3+0x20>
 a40:	95 0f       	add	r25, r21
 a42:	50 e0       	ldi	r21, 0x00	; 0
 a44:	55 1f       	adc	r21, r21
 a46:	62 9f       	mul	r22, r18
 a48:	f0 01       	movw	r30, r0
 a4a:	72 9f       	mul	r23, r18
 a4c:	bb 27       	eor	r27, r27
 a4e:	f0 0d       	add	r31, r0
 a50:	b1 1d       	adc	r27, r1
 a52:	63 9f       	mul	r22, r19
 a54:	aa 27       	eor	r26, r26
 a56:	f0 0d       	add	r31, r0
 a58:	b1 1d       	adc	r27, r1
 a5a:	aa 1f       	adc	r26, r26
 a5c:	64 9f       	mul	r22, r20
 a5e:	66 27       	eor	r22, r22
 a60:	b0 0d       	add	r27, r0
 a62:	a1 1d       	adc	r26, r1
 a64:	66 1f       	adc	r22, r22
 a66:	82 9f       	mul	r24, r18
 a68:	22 27       	eor	r18, r18
 a6a:	b0 0d       	add	r27, r0
 a6c:	a1 1d       	adc	r26, r1
 a6e:	62 1f       	adc	r22, r18
 a70:	73 9f       	mul	r23, r19
 a72:	b0 0d       	add	r27, r0
 a74:	a1 1d       	adc	r26, r1
 a76:	62 1f       	adc	r22, r18
 a78:	83 9f       	mul	r24, r19
 a7a:	a0 0d       	add	r26, r0
 a7c:	61 1d       	adc	r22, r1
 a7e:	22 1f       	adc	r18, r18
 a80:	74 9f       	mul	r23, r20
 a82:	33 27       	eor	r19, r19
 a84:	a0 0d       	add	r26, r0
 a86:	61 1d       	adc	r22, r1
 a88:	23 1f       	adc	r18, r19
 a8a:	84 9f       	mul	r24, r20
 a8c:	60 0d       	add	r22, r0
 a8e:	21 1d       	adc	r18, r1
 a90:	82 2f       	mov	r24, r18
 a92:	76 2f       	mov	r23, r22
 a94:	6a 2f       	mov	r22, r26
 a96:	11 24       	eor	r1, r1
 a98:	9f 57       	subi	r25, 0x7F	; 127
 a9a:	50 40       	sbci	r21, 0x00	; 0
 a9c:	9a f0       	brmi	.+38     	; 0xac4 <__mulsf3_pse+0x88>
 a9e:	f1 f0       	breq	.+60     	; 0xadc <__mulsf3_pse+0xa0>
 aa0:	88 23       	and	r24, r24
 aa2:	4a f0       	brmi	.+18     	; 0xab6 <__mulsf3_pse+0x7a>
 aa4:	ee 0f       	add	r30, r30
 aa6:	ff 1f       	adc	r31, r31
 aa8:	bb 1f       	adc	r27, r27
 aaa:	66 1f       	adc	r22, r22
 aac:	77 1f       	adc	r23, r23
 aae:	88 1f       	adc	r24, r24
 ab0:	91 50       	subi	r25, 0x01	; 1
 ab2:	50 40       	sbci	r21, 0x00	; 0
 ab4:	a9 f7       	brne	.-22     	; 0xaa0 <__mulsf3_pse+0x64>
 ab6:	9e 3f       	cpi	r25, 0xFE	; 254
 ab8:	51 05       	cpc	r21, r1
 aba:	80 f0       	brcs	.+32     	; 0xadc <__mulsf3_pse+0xa0>
 abc:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_inf>
 ac0:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_szero>
 ac4:	5f 3f       	cpi	r21, 0xFF	; 255
 ac6:	e4 f3       	brlt	.-8      	; 0xac0 <__mulsf3_pse+0x84>
 ac8:	98 3e       	cpi	r25, 0xE8	; 232
 aca:	d4 f3       	brlt	.-12     	; 0xac0 <__mulsf3_pse+0x84>
 acc:	86 95       	lsr	r24
 ace:	77 95       	ror	r23
 ad0:	67 95       	ror	r22
 ad2:	b7 95       	ror	r27
 ad4:	f7 95       	ror	r31
 ad6:	e7 95       	ror	r30
 ad8:	9f 5f       	subi	r25, 0xFF	; 255
 ada:	c1 f7       	brne	.-16     	; 0xacc <__mulsf3_pse+0x90>
 adc:	fe 2b       	or	r31, r30
 ade:	88 0f       	add	r24, r24
 ae0:	91 1d       	adc	r25, r1
 ae2:	96 95       	lsr	r25
 ae4:	87 95       	ror	r24
 ae6:	97 f9       	bld	r25, 7
 ae8:	08 95       	ret

00000aea <eeprom_read_byte>:
 aea:	f9 99       	sbic	0x1f, 1	; 31
 aec:	fe cf       	rjmp	.-4      	; 0xaea <eeprom_read_byte>
 aee:	92 bd       	out	0x22, r25	; 34
 af0:	81 bd       	out	0x21, r24	; 33
 af2:	f8 9a       	sbi	0x1f, 0	; 31
 af4:	99 27       	eor	r25, r25
 af6:	80 b5       	in	r24, 0x20	; 32
 af8:	08 95       	ret

00000afa <eeprom_write_byte>:
 afa:	26 2f       	mov	r18, r22

00000afc <eeprom_write_r18>:
 afc:	f9 99       	sbic	0x1f, 1	; 31
 afe:	fe cf       	rjmp	.-4      	; 0xafc <eeprom_write_r18>
 b00:	1f ba       	out	0x1f, r1	; 31
 b02:	92 bd       	out	0x22, r25	; 34
 b04:	81 bd       	out	0x21, r24	; 33
 b06:	20 bd       	out	0x20, r18	; 32
 b08:	0f b6       	in	r0, 0x3f	; 63
 b0a:	f8 94       	cli
 b0c:	fa 9a       	sbi	0x1f, 2	; 31
 b0e:	f9 9a       	sbi	0x1f, 1	; 31
 b10:	0f be       	out	0x3f, r0	; 63
 b12:	01 96       	adiw	r24, 0x01	; 1
 b14:	08 95       	ret

00000b16 <_exit>:
 b16:	f8 94       	cli

00000b18 <__stop_program>:
 b18:	ff cf       	rjmp	.-2      	; 0xb18 <__stop_program>
