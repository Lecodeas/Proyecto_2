
Proyecto_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000820  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000894  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d4f  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f6  00000000  00000000  00001743  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ff  00000000  00000000  00002139  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000519  00000000  00000000  00002bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000340  00000000  00000000  000030f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003431  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  88:	0c 94 0e 04 	jmp	0x81c	; 0x81c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setupADC>:

uint8_t valoradc;

void setupADC(void){
	//Digital disable
	DIDR0 = 0;
  90:	ee e7       	ldi	r30, 0x7E	; 126
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	DIDR0 |= (1<<ADC5D) | (1<< ADC4D); //ADC5 y ADC4
  96:	80 81       	ld	r24, Z
  98:	80 63       	ori	r24, 0x30	; 48
  9a:	80 83       	st	Z, r24
	//Setup general
	ADMUX = 0;
  9c:	ec e7       	ldi	r30, 0x7C	; 124
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Vcc ref | Just. Izq. | Mux ADC7
  a2:	80 81       	ld	r24, Z
  a4:	87 66       	ori	r24, 0x67	; 103
  a6:	80 83       	st	Z, r24
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Int. En | Presc. 128 (125kHz)
  ae:	80 81       	ld	r24, Z
  b0:	8f 60       	ori	r24, 0x0F	; 15
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); // Enable
  b4:	80 81       	ld	r24, Z
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Primer Inicio
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <fetchADCH>:
}

uint8_t fetchADCH(void){
	return (valoradc);
}
  c2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <valoradc>
  c6:	08 95       	ret

000000c8 <__vector_21>:

ISR(ADC_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	valoradc = ADCH; // Almacenar valor
  d4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  d8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <valoradc>
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <setupGeneral>:
//OTRAS FUNCIONES

void setupGeneral(void){
	//Entradas y Salidas
	//ENTRADAS
	DDRD = 0; //Solo PD1 será salida
  e8:	1a b8       	out	0x0a, r1	; 10
	
	//SALIDAS
	DDRC = 0; //Todas salidas (Digital disabled para PC4 y PC5)
  ea:	17 b8       	out	0x07, r1	; 7
	DDRB = 0xFF; //Todas salidas
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD1);		
  f0:	8a b1       	in	r24, 0x0a	; 10
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	8a b9       	out	0x0a, r24	; 10
  f6:	08 95       	ret

000000f8 <main>:
void setupGeneral(void);

//PRINCIPAL
int main(void)
{
	cli(); 
  f8:	f8 94       	cli
    setupADC();
  fa:	0e 94 48 00 	call	0x90	; 0x90 <setupADC>
	setupPWM1();
  fe:	0e 94 16 01 	call	0x22c	; 0x22c <setupPWM1>
	setupTimer2();
 102:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <setupTimer2>
	setupUART();
 106:	0e 94 c7 01 	call	0x38e	; 0x38e <setupUART>
	setupGeneral();
 10a:	0e 94 74 00 	call	0xe8	; 0xe8 <setupGeneral>
	sei();
 10e:	78 94       	sei
	
    while (1) 
    {
		//Servo 1 PB3
		adchleido = fetchADCH(); //Recibo el adch actual
 110:	0e 94 61 00 	call	0xc2	; 0xc2 <fetchADCH>
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		actualizar_servomanual(adchleido, 1); //Lo envía al servo 1
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <actualizar_servomanual>
		ADMUX &= 0xF0;
 122:	cc e7       	ldi	r28, 0x7C	; 124
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	88 81       	ld	r24, Y
 128:	80 7f       	andi	r24, 0xF0	; 240
 12a:	88 83       	st	Y, r24
		ADMUX |= (1<<MUX2) | (1<<MUX1); //Remultiplexado ADC6
 12c:	88 81       	ld	r24, Y
 12e:	86 60       	ori	r24, 0x06	; 6
 130:	88 83       	st	Y, r24
		ADCSRA |= (1<<ADSC); //Volver a iniciar ADC
 132:	0a e7       	ldi	r16, 0x7A	; 122
 134:	10 e0       	ldi	r17, 0x00	; 0
 136:	f8 01       	movw	r30, r16
 138:	80 81       	ld	r24, Z
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e1       	ldi	r24, 0x1F	; 31
 140:	9e e4       	ldi	r25, 0x4E	; 78
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0x4a>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x50>
 148:	00 00       	nop
		_delay_us(500);	
	
		//Servo 2 OC1B
		adchleido = fetchADCH(); //Recibo el adch actual
 14a:	0e 94 61 00 	call	0xc2	; 0xc2 <fetchADCH>
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		actualizar_servo(adchleido, 2); //Lo envía al servo 2
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	0e 94 38 01 	call	0x270	; 0x270 <actualizar_servo>
		ADMUX &= 0xF0;
 15c:	88 81       	ld	r24, Y
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	88 83       	st	Y, r24
		ADMUX |= (1<<MUX2) | (1<<MUX0); //Remultiplexado ADC5
 162:	88 81       	ld	r24, Y
 164:	85 60       	ori	r24, 0x05	; 5
 166:	88 83       	st	Y, r24
		ADCSRA |= (1<<ADSC); //Volver a iniciar ADC
 168:	f8 01       	movw	r30, r16
 16a:	80 81       	ld	r24, Z
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	80 83       	st	Z, r24
 170:	8f e1       	ldi	r24, 0x1F	; 31
 172:	9e e4       	ldi	r25, 0x4E	; 78
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0x7c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x82>
 17a:	00 00       	nop
		_delay_us(500);
		
		//Servo 3 OC1A
		adchleido = fetchADCH(); //Recibo el adch actual
 17c:	0e 94 61 00 	call	0xc2	; 0xc2 <fetchADCH>
 180:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		actualizar_servo(adchleido, 3); //Lo envía al servo 3
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 188:	63 e0       	ldi	r22, 0x03	; 3
 18a:	0e 94 38 01 	call	0x270	; 0x270 <actualizar_servo>
		enviarNum(adchleido);
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <enviarNum>
		ADMUX &= 0xF0;
 196:	88 81       	ld	r24, Y
 198:	80 7f       	andi	r24, 0xF0	; 240
 19a:	88 83       	st	Y, r24
		ADMUX |=  (1<<MUX2); //Remultiplexado ADC4
 19c:	88 81       	ld	r24, Y
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	88 83       	st	Y, r24
		ADCSRA |= (1<<ADSC); //Volver a iniciar ADC
 1a2:	f8 01       	movw	r30, r16
 1a4:	80 81       	ld	r24, Z
 1a6:	80 64       	ori	r24, 0x40	; 64
 1a8:	80 83       	st	Z, r24
 1aa:	8f e1       	ldi	r24, 0x1F	; 31
 1ac:	9e e4       	ldi	r25, 0x4E	; 78
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0xb6>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0xbc>
 1b4:	00 00       	nop
		_delay_us(500);
		
		//Servo 4 PB0
		adchleido = fetchADCH(); //Recibo el adch actual
 1b6:	0e 94 61 00 	call	0xc2	; 0xc2 <fetchADCH>
 1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		actualizar_servomanual(adchleido, 4); //Lo envía al servo 4
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c2:	64 e0       	ldi	r22, 0x04	; 4
 1c4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <actualizar_servomanual>
		ADMUX &= 0xF0;
 1c8:	88 81       	ld	r24, Y
 1ca:	80 7f       	andi	r24, 0xF0	; 240
 1cc:	88 83       	st	Y, r24
		ADMUX |= (1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Remultiplexado ADC7
 1ce:	88 81       	ld	r24, Y
 1d0:	87 60       	ori	r24, 0x07	; 7
 1d2:	88 83       	st	Y, r24
		ADCSRA |= (1<<ADSC); //Volver a iniciar ADC
 1d4:	f8 01       	movw	r30, r16
 1d6:	80 81       	ld	r24, Z
 1d8:	80 64       	ori	r24, 0x40	; 64
 1da:	80 83       	st	Z, r24
 1dc:	8f e1       	ldi	r24, 0x1F	; 31
 1de:	9e e4       	ldi	r25, 0x4E	; 78
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0xe8>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0xee>
 1e6:	00 00       	nop
 1e8:	93 cf       	rjmp	.-218    	; 0x110 <main+0x18>

000001ea <actualizar_pwm>:
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11); //A1 No inverted | B1 No inverted | Fast con ICR1 Top
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
}

static void actualizar_pwm(uint16_t i, uint8_t NumServo){
	listo_actualizar_pwm = 1;
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <listo_actualizar_pwm>
	while (listo_actualizar_pwm != 0){
 1f0:	0c c0       	rjmp	.+24     	; 0x20a <actualizar_pwm+0x20>
		//El valor del pulso depende del leído en ADCH
		//El OCR1 modificado depende de NumServo
		if (NumServo==3){
 1f2:	63 30       	cpi	r22, 0x03	; 3
 1f4:	21 f4       	brne	.+8      	; 0x1fe <actualizar_pwm+0x14>
			OCR1AH = (i & 0xFF00) >> 8;
 1f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = (i & 0x00FF);
 1fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		if(NumServo==2){
 1fe:	62 30       	cpi	r22, 0x02	; 2
 200:	21 f4       	brne	.+8      	; 0x20a <actualizar_pwm+0x20>
			OCR1BH = (i & 0xFF00) >> 8;
 202:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
			OCR1BL = (i & 0x00FF);
 206:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
}

static void actualizar_pwm(uint16_t i, uint8_t NumServo){
	listo_actualizar_pwm = 1;
	while (listo_actualizar_pwm != 0){
 20a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <listo_actualizar_pwm>
 20e:	21 11       	cpse	r18, r1
 210:	f0 cf       	rjmp	.-32     	; 0x1f2 <actualizar_pwm+0x8>
		if(NumServo==2){
			OCR1BH = (i & 0xFF00) >> 8;
			OCR1BL = (i & 0x00FF);
		}
	}
}
 212:	08 95       	ret

00000214 <__vector_13>:

#include "PWM1.h"

uint8_t listo_actualizar_pwm = 0;

ISR(TIMER1_OVF_vect){
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
	//Regresa a los 20ms
	listo_actualizar_pwm = 0;
 21e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <listo_actualizar_pwm>
}
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <setupPWM1>:


void setupPWM1(void){
	//Interrupciones
	TIMSK1 = 0;
 22c:	ef e6       	ldi	r30, 0x6F	; 111
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	10 82       	st	Z, r1
	TIMSK1 = (1<<TOIE1); //Overflow
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 83       	st	Z, r24
	
	//Top en ICR1
	ICR1H = (PWMTOP & 0xFF00) >> 8;
 236:	8c e9       	ldi	r24, 0x9C	; 156
 238:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = (PWMTOP & 0x00FF);
 23c:	8f e3       	ldi	r24, 0x3F	; 63
 23e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	//Inicializar servo al minimo
	OCR1AH = (SERVOMIN & 0xFF00) >> 8;
 242:	93 e0       	ldi	r25, 0x03	; 3
 244:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = (SERVOMIN & 0x00FF);
 248:	80 ef       	ldi	r24, 0xF0	; 240
 24a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	OCR1BH = (SERVOMIN & 0xFF00) >> 8;
 24e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
	OCR1BL = (SERVOMIN & 0x00FF);
 252:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	//Forma, modo, prescaler
	TCCR1A = 0;
 256:	a0 e8       	ldi	r26, 0x80	; 128
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	1c 92       	st	X, r1
	TCCR1B = 0;
 25c:	e1 e8       	ldi	r30, 0x81	; 129
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	10 82       	st	Z, r1
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11); //A1 No inverted | B1 No inverted | Fast con ICR1 Top
 262:	8c 91       	ld	r24, X
 264:	82 6a       	ori	r24, 0xA2	; 162
 266:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
 268:	80 81       	ld	r24, Z
 26a:	8a 61       	ori	r24, 0x1A	; 26
 26c:	80 83       	st	Z, r24
 26e:	08 95       	ret

00000270 <actualizar_servo>:
			OCR1BL = (i & 0x00FF);
		}
	}
}

void actualizar_servo(uint8_t adchleido, uint8_t servo_a_modificar){
 270:	cf 93       	push	r28
 272:	c6 2f       	mov	r28, r22
	//Conversión de lectura de ADC a pulso en PWM
	float razon = (float)adchleido/(float)255;
 274:	68 2f       	mov	r22, r24
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 13 03 	call	0x626	; 0x626 <__floatunsisf>
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	4f e7       	ldi	r20, 0x7F	; 127
 286:	53 e4       	ldi	r21, 0x43	; 67
 288:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__divsf3>
	razon = (((float)SERVOMAX - (float)SERVOMIN)*razon) + (float)SERVOMIN;
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 ed       	ldi	r19, 0xD0	; 208
 290:	4c e6       	ldi	r20, 0x6C	; 108
 292:	55 e4       	ldi	r21, 0x45	; 69
 294:	0e 94 a1 03 	call	0x742	; 0x742 <__mulsf3>
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	4c e7       	ldi	r20, 0x7C	; 124
 29e:	54 e4       	ldi	r21, 0x44	; 68
 2a0:	0e 94 06 02 	call	0x40c	; 0x40c <__addsf3>
	uint16_t valorservo = (uint16_t)razon;
 2a4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fixunssfsi>
 2a8:	dc 01       	movw	r26, r24
 2aa:	cb 01       	movw	r24, r22
	actualizar_pwm(valorservo, servo_a_modificar);
 2ac:	6c 2f       	mov	r22, r28
 2ae:	0e 94 f5 00 	call	0x1ea	; 0x1ea <actualizar_pwm>
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <setupTimer2>:
uint16_t limite_contador1 = 0;
uint16_t limite_contador2 = 0;

void setupTimer2(void){
	//Interrupciones
	TIMSK2 = 0;
 2b6:	e0 e7       	ldi	r30, 0x70	; 112
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	10 82       	st	Z, r1
	TIMSK2 = (1<<TOIE2); //Overflow
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 83       	st	Z, r24
	
	//Forma, modo, prescaler
	TCCR2A = 0;
 2c0:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 2c4:	e1 eb       	ldi	r30, 0xB1	; 177
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	10 82       	st	Z, r1
	TCCR2B |= (1<<CS21); //Operación temporizador | Prescaler 8
 2ca:	80 81       	ld	r24, Z
 2cc:	82 60       	ori	r24, 0x02	; 2
 2ce:	80 83       	st	Z, r24
	
	//Inicial en el valor límite
	TCNT2 = TIMERTOP;
 2d0:	82 ef       	ldi	r24, 0xF2	; 242
 2d2:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 2d6:	08 95       	ret

000002d8 <actualizar_servomanual>:
}

void actualizar_servomanual(uint8_t adchleido, uint8_t servo_a_modificar){
	if (servo_a_modificar == 1){
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	31 f4       	brne	.+12     	; 0x2e8 <actualizar_servomanual+0x10>
		limite_contador1 = adchleido; //Servo 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <limite_contador1+0x1>
 2e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <limite_contador1>
 2e6:	08 95       	ret
	}else{
		limite_contador2 = adchleido; //Servo 4
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <limite_contador2+0x1>
 2ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <limite_contador2>
 2f2:	08 95       	ret

000002f4 <__vector_9>:
	}
}

ISR(TIMER2_OVF_vect){
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
	//Cuando llega al tope pasan .007ms entonces se actualiza la señal en PB3 o PB0
	//dependiendo de la comparación de contadores
	
	//Servo 1
	if (contador_pwm >= limite_contador1){
 306:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <contador_pwm>
 30a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <contador_pwm+0x1>
 30e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <limite_contador1>
 312:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <limite_contador1+0x1>
 316:	28 17       	cp	r18, r24
 318:	39 07       	cpc	r19, r25
 31a:	20 f0       	brcs	.+8      	; 0x324 <__vector_9+0x30>
		PORTB &= 0xF7;
 31c:	85 b1       	in	r24, 0x05	; 5
 31e:	87 7f       	andi	r24, 0xF7	; 247
 320:	85 b9       	out	0x05, r24	; 5
 322:	03 c0       	rjmp	.+6      	; 0x32a <__vector_9+0x36>
	}
	else{
		PORTB |= 0x08;
 324:	85 b1       	in	r24, 0x05	; 5
 326:	88 60       	ori	r24, 0x08	; 8
 328:	85 b9       	out	0x05, r24	; 5
	}
	
	//Servo 4
	if (contador_pwm >= limite_contador2){
 32a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <contador_pwm>
 32e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <contador_pwm+0x1>
 332:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <limite_contador2>
 336:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <limite_contador2+0x1>
 33a:	28 17       	cp	r18, r24
 33c:	39 07       	cpc	r19, r25
 33e:	20 f0       	brcs	.+8      	; 0x348 <__vector_9+0x54>
		PORTB &= 0xFE;
 340:	85 b1       	in	r24, 0x05	; 5
 342:	8e 7f       	andi	r24, 0xFE	; 254
 344:	85 b9       	out	0x05, r24	; 5
 346:	03 c0       	rjmp	.+6      	; 0x34e <__vector_9+0x5a>
	}
	else{
		PORTB |= 0x01;
 348:	85 b1       	in	r24, 0x05	; 5
 34a:	81 60       	ori	r24, 0x01	; 1
 34c:	85 b9       	out	0x05, r24	; 5
	}
	
	contador_pwm += 1;
 34e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador_pwm>
 352:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <contador_pwm+0x1>
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <contador_pwm+0x1>
 35c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <contador_pwm>
	TCNT2 = TIMERTOP;
 360:	82 ef       	ldi	r24, 0xF2	; 242
 362:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	//Limite
	if (contador_pwm > MANUALTOP){
 366:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador_pwm>
 36a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <contador_pwm+0x1>
 36e:	8b 32       	cpi	r24, 0x2B	; 43
 370:	9b 40       	sbci	r25, 0x0B	; 11
 372:	20 f0       	brcs	.+8      	; 0x37c <__vector_9+0x88>
		contador_pwm = 0;
 374:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <contador_pwm+0x1>
 378:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <contador_pwm>
	}
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	3f 91       	pop	r19
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <setupUART>:
#include "UART.h"


void setupUART(void){
	//No necesito nada de este registro
	UCSR0A = 0;
 38e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Rx int. | Tx En. | Rx en.
	UCSR0B = 0;
 392:	e1 ec       	ldi	r30, 0xC1	; 193
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 398:	80 81       	ld	r24, Z
 39a:	88 69       	ori	r24, 0x98	; 152
 39c:	80 83       	st	Z, r24
	
	//Async | No Pariety | 1 stop | 8 data
	UCSR0C = 0;
 39e:	e2 ec       	ldi	r30, 0xC2	; 194
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 3a4:	80 81       	ld	r24, Z
 3a6:	86 60       	ori	r24, 0x06	; 6
 3a8:	80 83       	st	Z, r24
	
	//UDR0 9600
	UBRR0 = 103;
 3aa:	87 e6       	ldi	r24, 0x67	; 103
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3b6:	08 95       	ret

000003b8 <enviarChar>:
	
}

void enviarChar(char Caracter){
	while (!(UCSR0A & (1<<UDRE0))); //Hasta que esté vacío puedo enviar el dato
 3b8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3bc:	95 ff       	sbrs	r25, 5
 3be:	fc cf       	rjmp	.-8      	; 0x3b8 <enviarChar>
	UDR0 = Caracter;
 3c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3c4:	08 95       	ret

000003c6 <enviarNum>:
}

void enviarNum(uint8_t adchleido){
 3c6:	cf 93       	push	r28
 3c8:	c8 2f       	mov	r28, r24
	//Envío de caracter por caracter a UART
	uint8_t c = 0; //Centenas
 3ca:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t d = 0; //Decenas
	uint8_t u = 0; //Unidades
	while(adchleido > 99){
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <enviarNum+0xc>
		c++;
 3ce:	8f 5f       	subi	r24, 0xFF	; 255
		adchleido -= 100;
 3d0:	c4 56       	subi	r28, 0x64	; 100
void enviarNum(uint8_t adchleido){
	//Envío de caracter por caracter a UART
	uint8_t c = 0; //Centenas
	uint8_t d = 0; //Decenas
	uint8_t u = 0; //Unidades
	while(adchleido > 99){
 3d2:	c4 36       	cpi	r28, 0x64	; 100
 3d4:	e0 f7       	brcc	.-8      	; 0x3ce <enviarNum+0x8>
		c++;
		adchleido -= 100;
	}
	enviarChar((char) c+48);
 3d6:	80 5d       	subi	r24, 0xD0	; 208
 3d8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <enviarChar>
}

void enviarNum(uint8_t adchleido){
	//Envío de caracter por caracter a UART
	uint8_t c = 0; //Centenas
	uint8_t d = 0; //Decenas
 3dc:	80 e0       	ldi	r24, 0x00	; 0
	while(adchleido > 99){
		c++;
		adchleido -= 100;
	}
	enviarChar((char) c+48);
	while(adchleido > 9){
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <enviarNum+0x1e>
		d++;
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
		adchleido -= 10;
 3e2:	ca 50       	subi	r28, 0x0A	; 10
	while(adchleido > 99){
		c++;
		adchleido -= 100;
	}
	enviarChar((char) c+48);
	while(adchleido > 9){
 3e4:	ca 30       	cpi	r28, 0x0A	; 10
 3e6:	e0 f7       	brcc	.-8      	; 0x3e0 <enviarNum+0x1a>
		d++;
		adchleido -= 10;
	}
	enviarChar((char) d+48);
 3e8:	80 5d       	subi	r24, 0xD0	; 208
 3ea:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <enviarChar>

void enviarNum(uint8_t adchleido){
	//Envío de caracter por caracter a UART
	uint8_t c = 0; //Centenas
	uint8_t d = 0; //Decenas
	uint8_t u = 0; //Unidades
 3ee:	80 e0       	ldi	r24, 0x00	; 0
	while(adchleido > 9){
		d++;
		adchleido -= 10;
	}
	enviarChar((char) d+48);
	while(adchleido != 0){
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <enviarNum+0x30>
		u++;
 3f2:	8f 5f       	subi	r24, 0xFF	; 255
		adchleido -= 1;
 3f4:	c1 50       	subi	r28, 0x01	; 1
	while(adchleido > 9){
		d++;
		adchleido -= 10;
	}
	enviarChar((char) d+48);
	while(adchleido != 0){
 3f6:	c1 11       	cpse	r28, r1
 3f8:	fc cf       	rjmp	.-8      	; 0x3f2 <enviarNum+0x2c>
		u++;
		adchleido -= 1;
	}
	enviarChar((char) u+48);
 3fa:	80 5d       	subi	r24, 0xD0	; 208
 3fc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <enviarChar>
	enviarChar('\n');
 400:	8a e0       	ldi	r24, 0x0A	; 10
 402:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <enviarChar>
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <__subsf3>:
 40a:	50 58       	subi	r21, 0x80	; 128

0000040c <__addsf3>:
 40c:	bb 27       	eor	r27, r27
 40e:	aa 27       	eor	r26, r26
 410:	0e 94 1d 02 	call	0x43a	; 0x43a <__addsf3x>
 414:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_round>
 418:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fp_pscA>
 41c:	38 f0       	brcs	.+14     	; 0x42c <__addsf3+0x20>
 41e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscB>
 422:	20 f0       	brcs	.+8      	; 0x42c <__addsf3+0x20>
 424:	39 f4       	brne	.+14     	; 0x434 <__addsf3+0x28>
 426:	9f 3f       	cpi	r25, 0xFF	; 255
 428:	19 f4       	brne	.+6      	; 0x430 <__addsf3+0x24>
 42a:	26 f4       	brtc	.+8      	; 0x434 <__addsf3+0x28>
 42c:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_nan>
 430:	0e f4       	brtc	.+2      	; 0x434 <__addsf3+0x28>
 432:	e0 95       	com	r30
 434:	e7 fb       	bst	r30, 7
 436:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>

0000043a <__addsf3x>:
 43a:	e9 2f       	mov	r30, r25
 43c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_split3>
 440:	58 f3       	brcs	.-42     	; 0x418 <__addsf3+0xc>
 442:	ba 17       	cp	r27, r26
 444:	62 07       	cpc	r22, r18
 446:	73 07       	cpc	r23, r19
 448:	84 07       	cpc	r24, r20
 44a:	95 07       	cpc	r25, r21
 44c:	20 f0       	brcs	.+8      	; 0x456 <__addsf3x+0x1c>
 44e:	79 f4       	brne	.+30     	; 0x46e <__addsf3x+0x34>
 450:	a6 f5       	brtc	.+104    	; 0x4ba <__addsf3x+0x80>
 452:	0c 94 9a 03 	jmp	0x734	; 0x734 <__fp_zero>
 456:	0e f4       	brtc	.+2      	; 0x45a <__addsf3x+0x20>
 458:	e0 95       	com	r30
 45a:	0b 2e       	mov	r0, r27
 45c:	ba 2f       	mov	r27, r26
 45e:	a0 2d       	mov	r26, r0
 460:	0b 01       	movw	r0, r22
 462:	b9 01       	movw	r22, r18
 464:	90 01       	movw	r18, r0
 466:	0c 01       	movw	r0, r24
 468:	ca 01       	movw	r24, r20
 46a:	a0 01       	movw	r20, r0
 46c:	11 24       	eor	r1, r1
 46e:	ff 27       	eor	r31, r31
 470:	59 1b       	sub	r21, r25
 472:	99 f0       	breq	.+38     	; 0x49a <__addsf3x+0x60>
 474:	59 3f       	cpi	r21, 0xF9	; 249
 476:	50 f4       	brcc	.+20     	; 0x48c <__addsf3x+0x52>
 478:	50 3e       	cpi	r21, 0xE0	; 224
 47a:	68 f1       	brcs	.+90     	; 0x4d6 <__addsf3x+0x9c>
 47c:	1a 16       	cp	r1, r26
 47e:	f0 40       	sbci	r31, 0x00	; 0
 480:	a2 2f       	mov	r26, r18
 482:	23 2f       	mov	r18, r19
 484:	34 2f       	mov	r19, r20
 486:	44 27       	eor	r20, r20
 488:	58 5f       	subi	r21, 0xF8	; 248
 48a:	f3 cf       	rjmp	.-26     	; 0x472 <__addsf3x+0x38>
 48c:	46 95       	lsr	r20
 48e:	37 95       	ror	r19
 490:	27 95       	ror	r18
 492:	a7 95       	ror	r26
 494:	f0 40       	sbci	r31, 0x00	; 0
 496:	53 95       	inc	r21
 498:	c9 f7       	brne	.-14     	; 0x48c <__addsf3x+0x52>
 49a:	7e f4       	brtc	.+30     	; 0x4ba <__addsf3x+0x80>
 49c:	1f 16       	cp	r1, r31
 49e:	ba 0b       	sbc	r27, r26
 4a0:	62 0b       	sbc	r22, r18
 4a2:	73 0b       	sbc	r23, r19
 4a4:	84 0b       	sbc	r24, r20
 4a6:	ba f0       	brmi	.+46     	; 0x4d6 <__addsf3x+0x9c>
 4a8:	91 50       	subi	r25, 0x01	; 1
 4aa:	a1 f0       	breq	.+40     	; 0x4d4 <__addsf3x+0x9a>
 4ac:	ff 0f       	add	r31, r31
 4ae:	bb 1f       	adc	r27, r27
 4b0:	66 1f       	adc	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	88 1f       	adc	r24, r24
 4b6:	c2 f7       	brpl	.-16     	; 0x4a8 <__addsf3x+0x6e>
 4b8:	0e c0       	rjmp	.+28     	; 0x4d6 <__addsf3x+0x9c>
 4ba:	ba 0f       	add	r27, r26
 4bc:	62 1f       	adc	r22, r18
 4be:	73 1f       	adc	r23, r19
 4c0:	84 1f       	adc	r24, r20
 4c2:	48 f4       	brcc	.+18     	; 0x4d6 <__addsf3x+0x9c>
 4c4:	87 95       	ror	r24
 4c6:	77 95       	ror	r23
 4c8:	67 95       	ror	r22
 4ca:	b7 95       	ror	r27
 4cc:	f7 95       	ror	r31
 4ce:	9e 3f       	cpi	r25, 0xFE	; 254
 4d0:	08 f0       	brcs	.+2      	; 0x4d4 <__addsf3x+0x9a>
 4d2:	b0 cf       	rjmp	.-160    	; 0x434 <__addsf3+0x28>
 4d4:	93 95       	inc	r25
 4d6:	88 0f       	add	r24, r24
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <__addsf3x+0xa2>
 4da:	99 27       	eor	r25, r25
 4dc:	ee 0f       	add	r30, r30
 4de:	97 95       	ror	r25
 4e0:	87 95       	ror	r24
 4e2:	08 95       	ret

000004e4 <__divsf3>:
 4e4:	0e 94 86 02 	call	0x50c	; 0x50c <__divsf3x>
 4e8:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_round>
 4ec:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscB>
 4f0:	58 f0       	brcs	.+22     	; 0x508 <__divsf3+0x24>
 4f2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fp_pscA>
 4f6:	40 f0       	brcs	.+16     	; 0x508 <__divsf3+0x24>
 4f8:	29 f4       	brne	.+10     	; 0x504 <__divsf3+0x20>
 4fa:	5f 3f       	cpi	r21, 0xFF	; 255
 4fc:	29 f0       	breq	.+10     	; 0x508 <__divsf3+0x24>
 4fe:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 502:	51 11       	cpse	r21, r1
 504:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 508:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_nan>

0000050c <__divsf3x>:
 50c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_split3>
 510:	68 f3       	brcs	.-38     	; 0x4ec <__divsf3+0x8>

00000512 <__divsf3_pse>:
 512:	99 23       	and	r25, r25
 514:	b1 f3       	breq	.-20     	; 0x502 <__divsf3+0x1e>
 516:	55 23       	and	r21, r21
 518:	91 f3       	breq	.-28     	; 0x4fe <__divsf3+0x1a>
 51a:	95 1b       	sub	r25, r21
 51c:	55 0b       	sbc	r21, r21
 51e:	bb 27       	eor	r27, r27
 520:	aa 27       	eor	r26, r26
 522:	62 17       	cp	r22, r18
 524:	73 07       	cpc	r23, r19
 526:	84 07       	cpc	r24, r20
 528:	38 f0       	brcs	.+14     	; 0x538 <__divsf3_pse+0x26>
 52a:	9f 5f       	subi	r25, 0xFF	; 255
 52c:	5f 4f       	sbci	r21, 0xFF	; 255
 52e:	22 0f       	add	r18, r18
 530:	33 1f       	adc	r19, r19
 532:	44 1f       	adc	r20, r20
 534:	aa 1f       	adc	r26, r26
 536:	a9 f3       	breq	.-22     	; 0x522 <__divsf3_pse+0x10>
 538:	35 d0       	rcall	.+106    	; 0x5a4 <__divsf3_pse+0x92>
 53a:	0e 2e       	mov	r0, r30
 53c:	3a f0       	brmi	.+14     	; 0x54c <__divsf3_pse+0x3a>
 53e:	e0 e8       	ldi	r30, 0x80	; 128
 540:	32 d0       	rcall	.+100    	; 0x5a6 <__divsf3_pse+0x94>
 542:	91 50       	subi	r25, 0x01	; 1
 544:	50 40       	sbci	r21, 0x00	; 0
 546:	e6 95       	lsr	r30
 548:	00 1c       	adc	r0, r0
 54a:	ca f7       	brpl	.-14     	; 0x53e <__divsf3_pse+0x2c>
 54c:	2b d0       	rcall	.+86     	; 0x5a4 <__divsf3_pse+0x92>
 54e:	fe 2f       	mov	r31, r30
 550:	29 d0       	rcall	.+82     	; 0x5a4 <__divsf3_pse+0x92>
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	bb 1f       	adc	r27, r27
 55a:	26 17       	cp	r18, r22
 55c:	37 07       	cpc	r19, r23
 55e:	48 07       	cpc	r20, r24
 560:	ab 07       	cpc	r26, r27
 562:	b0 e8       	ldi	r27, 0x80	; 128
 564:	09 f0       	breq	.+2      	; 0x568 <__divsf3_pse+0x56>
 566:	bb 0b       	sbc	r27, r27
 568:	80 2d       	mov	r24, r0
 56a:	bf 01       	movw	r22, r30
 56c:	ff 27       	eor	r31, r31
 56e:	93 58       	subi	r25, 0x83	; 131
 570:	5f 4f       	sbci	r21, 0xFF	; 255
 572:	3a f0       	brmi	.+14     	; 0x582 <__divsf3_pse+0x70>
 574:	9e 3f       	cpi	r25, 0xFE	; 254
 576:	51 05       	cpc	r21, r1
 578:	78 f0       	brcs	.+30     	; 0x598 <__divsf3_pse+0x86>
 57a:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 57e:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 582:	5f 3f       	cpi	r21, 0xFF	; 255
 584:	e4 f3       	brlt	.-8      	; 0x57e <__divsf3_pse+0x6c>
 586:	98 3e       	cpi	r25, 0xE8	; 232
 588:	d4 f3       	brlt	.-12     	; 0x57e <__divsf3_pse+0x6c>
 58a:	86 95       	lsr	r24
 58c:	77 95       	ror	r23
 58e:	67 95       	ror	r22
 590:	b7 95       	ror	r27
 592:	f7 95       	ror	r31
 594:	9f 5f       	subi	r25, 0xFF	; 255
 596:	c9 f7       	brne	.-14     	; 0x58a <__divsf3_pse+0x78>
 598:	88 0f       	add	r24, r24
 59a:	91 1d       	adc	r25, r1
 59c:	96 95       	lsr	r25
 59e:	87 95       	ror	r24
 5a0:	97 f9       	bld	r25, 7
 5a2:	08 95       	ret
 5a4:	e1 e0       	ldi	r30, 0x01	; 1
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	88 1f       	adc	r24, r24
 5ac:	bb 1f       	adc	r27, r27
 5ae:	62 17       	cp	r22, r18
 5b0:	73 07       	cpc	r23, r19
 5b2:	84 07       	cpc	r24, r20
 5b4:	ba 07       	cpc	r27, r26
 5b6:	20 f0       	brcs	.+8      	; 0x5c0 <__divsf3_pse+0xae>
 5b8:	62 1b       	sub	r22, r18
 5ba:	73 0b       	sbc	r23, r19
 5bc:	84 0b       	sbc	r24, r20
 5be:	ba 0b       	sbc	r27, r26
 5c0:	ee 1f       	adc	r30, r30
 5c2:	88 f7       	brcc	.-30     	; 0x5a6 <__divsf3_pse+0x94>
 5c4:	e0 95       	com	r30
 5c6:	08 95       	ret

000005c8 <__fixunssfsi>:
 5c8:	0e 94 80 03 	call	0x700	; 0x700 <__fp_splitA>
 5cc:	88 f0       	brcs	.+34     	; 0x5f0 <__fixunssfsi+0x28>
 5ce:	9f 57       	subi	r25, 0x7F	; 127
 5d0:	98 f0       	brcs	.+38     	; 0x5f8 <__fixunssfsi+0x30>
 5d2:	b9 2f       	mov	r27, r25
 5d4:	99 27       	eor	r25, r25
 5d6:	b7 51       	subi	r27, 0x17	; 23
 5d8:	b0 f0       	brcs	.+44     	; 0x606 <__fixunssfsi+0x3e>
 5da:	e1 f0       	breq	.+56     	; 0x614 <__fixunssfsi+0x4c>
 5dc:	66 0f       	add	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	88 1f       	adc	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	1a f0       	brmi	.+6      	; 0x5ec <__fixunssfsi+0x24>
 5e6:	ba 95       	dec	r27
 5e8:	c9 f7       	brne	.-14     	; 0x5dc <__fixunssfsi+0x14>
 5ea:	14 c0       	rjmp	.+40     	; 0x614 <__fixunssfsi+0x4c>
 5ec:	b1 30       	cpi	r27, 0x01	; 1
 5ee:	91 f0       	breq	.+36     	; 0x614 <__fixunssfsi+0x4c>
 5f0:	0e 94 9a 03 	call	0x734	; 0x734 <__fp_zero>
 5f4:	b1 e0       	ldi	r27, 0x01	; 1
 5f6:	08 95       	ret
 5f8:	0c 94 9a 03 	jmp	0x734	; 0x734 <__fp_zero>
 5fc:	67 2f       	mov	r22, r23
 5fe:	78 2f       	mov	r23, r24
 600:	88 27       	eor	r24, r24
 602:	b8 5f       	subi	r27, 0xF8	; 248
 604:	39 f0       	breq	.+14     	; 0x614 <__fixunssfsi+0x4c>
 606:	b9 3f       	cpi	r27, 0xF9	; 249
 608:	cc f3       	brlt	.-14     	; 0x5fc <__fixunssfsi+0x34>
 60a:	86 95       	lsr	r24
 60c:	77 95       	ror	r23
 60e:	67 95       	ror	r22
 610:	b3 95       	inc	r27
 612:	d9 f7       	brne	.-10     	; 0x60a <__fixunssfsi+0x42>
 614:	3e f4       	brtc	.+14     	; 0x624 <__fixunssfsi+0x5c>
 616:	90 95       	com	r25
 618:	80 95       	com	r24
 61a:	70 95       	com	r23
 61c:	61 95       	neg	r22
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
 620:	8f 4f       	sbci	r24, 0xFF	; 255
 622:	9f 4f       	sbci	r25, 0xFF	; 255
 624:	08 95       	ret

00000626 <__floatunsisf>:
 626:	e8 94       	clt
 628:	09 c0       	rjmp	.+18     	; 0x63c <__floatsisf+0x12>

0000062a <__floatsisf>:
 62a:	97 fb       	bst	r25, 7
 62c:	3e f4       	brtc	.+14     	; 0x63c <__floatsisf+0x12>
 62e:	90 95       	com	r25
 630:	80 95       	com	r24
 632:	70 95       	com	r23
 634:	61 95       	neg	r22
 636:	7f 4f       	sbci	r23, 0xFF	; 255
 638:	8f 4f       	sbci	r24, 0xFF	; 255
 63a:	9f 4f       	sbci	r25, 0xFF	; 255
 63c:	99 23       	and	r25, r25
 63e:	a9 f0       	breq	.+42     	; 0x66a <__floatsisf+0x40>
 640:	f9 2f       	mov	r31, r25
 642:	96 e9       	ldi	r25, 0x96	; 150
 644:	bb 27       	eor	r27, r27
 646:	93 95       	inc	r25
 648:	f6 95       	lsr	r31
 64a:	87 95       	ror	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b7 95       	ror	r27
 652:	f1 11       	cpse	r31, r1
 654:	f8 cf       	rjmp	.-16     	; 0x646 <__floatsisf+0x1c>
 656:	fa f4       	brpl	.+62     	; 0x696 <__floatsisf+0x6c>
 658:	bb 0f       	add	r27, r27
 65a:	11 f4       	brne	.+4      	; 0x660 <__floatsisf+0x36>
 65c:	60 ff       	sbrs	r22, 0
 65e:	1b c0       	rjmp	.+54     	; 0x696 <__floatsisf+0x6c>
 660:	6f 5f       	subi	r22, 0xFF	; 255
 662:	7f 4f       	sbci	r23, 0xFF	; 255
 664:	8f 4f       	sbci	r24, 0xFF	; 255
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	16 c0       	rjmp	.+44     	; 0x696 <__floatsisf+0x6c>
 66a:	88 23       	and	r24, r24
 66c:	11 f0       	breq	.+4      	; 0x672 <__floatsisf+0x48>
 66e:	96 e9       	ldi	r25, 0x96	; 150
 670:	11 c0       	rjmp	.+34     	; 0x694 <__floatsisf+0x6a>
 672:	77 23       	and	r23, r23
 674:	21 f0       	breq	.+8      	; 0x67e <__floatsisf+0x54>
 676:	9e e8       	ldi	r25, 0x8E	; 142
 678:	87 2f       	mov	r24, r23
 67a:	76 2f       	mov	r23, r22
 67c:	05 c0       	rjmp	.+10     	; 0x688 <__floatsisf+0x5e>
 67e:	66 23       	and	r22, r22
 680:	71 f0       	breq	.+28     	; 0x69e <__floatsisf+0x74>
 682:	96 e8       	ldi	r25, 0x86	; 134
 684:	86 2f       	mov	r24, r22
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	2a f0       	brmi	.+10     	; 0x696 <__floatsisf+0x6c>
 68c:	9a 95       	dec	r25
 68e:	66 0f       	add	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	da f7       	brpl	.-10     	; 0x68c <__floatsisf+0x62>
 696:	88 0f       	add	r24, r24
 698:	96 95       	lsr	r25
 69a:	87 95       	ror	r24
 69c:	97 f9       	bld	r25, 7
 69e:	08 95       	ret

000006a0 <__fp_inf>:
 6a0:	97 f9       	bld	r25, 7
 6a2:	9f 67       	ori	r25, 0x7F	; 127
 6a4:	80 e8       	ldi	r24, 0x80	; 128
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	08 95       	ret

000006ac <__fp_nan>:
 6ac:	9f ef       	ldi	r25, 0xFF	; 255
 6ae:	80 ec       	ldi	r24, 0xC0	; 192
 6b0:	08 95       	ret

000006b2 <__fp_pscA>:
 6b2:	00 24       	eor	r0, r0
 6b4:	0a 94       	dec	r0
 6b6:	16 16       	cp	r1, r22
 6b8:	17 06       	cpc	r1, r23
 6ba:	18 06       	cpc	r1, r24
 6bc:	09 06       	cpc	r0, r25
 6be:	08 95       	ret

000006c0 <__fp_pscB>:
 6c0:	00 24       	eor	r0, r0
 6c2:	0a 94       	dec	r0
 6c4:	12 16       	cp	r1, r18
 6c6:	13 06       	cpc	r1, r19
 6c8:	14 06       	cpc	r1, r20
 6ca:	05 06       	cpc	r0, r21
 6cc:	08 95       	ret

000006ce <__fp_round>:
 6ce:	09 2e       	mov	r0, r25
 6d0:	03 94       	inc	r0
 6d2:	00 0c       	add	r0, r0
 6d4:	11 f4       	brne	.+4      	; 0x6da <__fp_round+0xc>
 6d6:	88 23       	and	r24, r24
 6d8:	52 f0       	brmi	.+20     	; 0x6ee <__fp_round+0x20>
 6da:	bb 0f       	add	r27, r27
 6dc:	40 f4       	brcc	.+16     	; 0x6ee <__fp_round+0x20>
 6de:	bf 2b       	or	r27, r31
 6e0:	11 f4       	brne	.+4      	; 0x6e6 <__fp_round+0x18>
 6e2:	60 ff       	sbrs	r22, 0
 6e4:	04 c0       	rjmp	.+8      	; 0x6ee <__fp_round+0x20>
 6e6:	6f 5f       	subi	r22, 0xFF	; 255
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ea:	8f 4f       	sbci	r24, 0xFF	; 255
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	08 95       	ret

000006f0 <__fp_split3>:
 6f0:	57 fd       	sbrc	r21, 7
 6f2:	90 58       	subi	r25, 0x80	; 128
 6f4:	44 0f       	add	r20, r20
 6f6:	55 1f       	adc	r21, r21
 6f8:	59 f0       	breq	.+22     	; 0x710 <__fp_splitA+0x10>
 6fa:	5f 3f       	cpi	r21, 0xFF	; 255
 6fc:	71 f0       	breq	.+28     	; 0x71a <__fp_splitA+0x1a>
 6fe:	47 95       	ror	r20

00000700 <__fp_splitA>:
 700:	88 0f       	add	r24, r24
 702:	97 fb       	bst	r25, 7
 704:	99 1f       	adc	r25, r25
 706:	61 f0       	breq	.+24     	; 0x720 <__fp_splitA+0x20>
 708:	9f 3f       	cpi	r25, 0xFF	; 255
 70a:	79 f0       	breq	.+30     	; 0x72a <__fp_splitA+0x2a>
 70c:	87 95       	ror	r24
 70e:	08 95       	ret
 710:	12 16       	cp	r1, r18
 712:	13 06       	cpc	r1, r19
 714:	14 06       	cpc	r1, r20
 716:	55 1f       	adc	r21, r21
 718:	f2 cf       	rjmp	.-28     	; 0x6fe <__fp_split3+0xe>
 71a:	46 95       	lsr	r20
 71c:	f1 df       	rcall	.-30     	; 0x700 <__fp_splitA>
 71e:	08 c0       	rjmp	.+16     	; 0x730 <__fp_splitA+0x30>
 720:	16 16       	cp	r1, r22
 722:	17 06       	cpc	r1, r23
 724:	18 06       	cpc	r1, r24
 726:	99 1f       	adc	r25, r25
 728:	f1 cf       	rjmp	.-30     	; 0x70c <__fp_splitA+0xc>
 72a:	86 95       	lsr	r24
 72c:	71 05       	cpc	r23, r1
 72e:	61 05       	cpc	r22, r1
 730:	08 94       	sec
 732:	08 95       	ret

00000734 <__fp_zero>:
 734:	e8 94       	clt

00000736 <__fp_szero>:
 736:	bb 27       	eor	r27, r27
 738:	66 27       	eor	r22, r22
 73a:	77 27       	eor	r23, r23
 73c:	cb 01       	movw	r24, r22
 73e:	97 f9       	bld	r25, 7
 740:	08 95       	ret

00000742 <__mulsf3>:
 742:	0e 94 b4 03 	call	0x768	; 0x768 <__mulsf3x>
 746:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_round>
 74a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fp_pscA>
 74e:	38 f0       	brcs	.+14     	; 0x75e <__mulsf3+0x1c>
 750:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscB>
 754:	20 f0       	brcs	.+8      	; 0x75e <__mulsf3+0x1c>
 756:	95 23       	and	r25, r21
 758:	11 f0       	breq	.+4      	; 0x75e <__mulsf3+0x1c>
 75a:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 75e:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_nan>
 762:	11 24       	eor	r1, r1
 764:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>

00000768 <__mulsf3x>:
 768:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_split3>
 76c:	70 f3       	brcs	.-36     	; 0x74a <__mulsf3+0x8>

0000076e <__mulsf3_pse>:
 76e:	95 9f       	mul	r25, r21
 770:	c1 f3       	breq	.-16     	; 0x762 <__mulsf3+0x20>
 772:	95 0f       	add	r25, r21
 774:	50 e0       	ldi	r21, 0x00	; 0
 776:	55 1f       	adc	r21, r21
 778:	62 9f       	mul	r22, r18
 77a:	f0 01       	movw	r30, r0
 77c:	72 9f       	mul	r23, r18
 77e:	bb 27       	eor	r27, r27
 780:	f0 0d       	add	r31, r0
 782:	b1 1d       	adc	r27, r1
 784:	63 9f       	mul	r22, r19
 786:	aa 27       	eor	r26, r26
 788:	f0 0d       	add	r31, r0
 78a:	b1 1d       	adc	r27, r1
 78c:	aa 1f       	adc	r26, r26
 78e:	64 9f       	mul	r22, r20
 790:	66 27       	eor	r22, r22
 792:	b0 0d       	add	r27, r0
 794:	a1 1d       	adc	r26, r1
 796:	66 1f       	adc	r22, r22
 798:	82 9f       	mul	r24, r18
 79a:	22 27       	eor	r18, r18
 79c:	b0 0d       	add	r27, r0
 79e:	a1 1d       	adc	r26, r1
 7a0:	62 1f       	adc	r22, r18
 7a2:	73 9f       	mul	r23, r19
 7a4:	b0 0d       	add	r27, r0
 7a6:	a1 1d       	adc	r26, r1
 7a8:	62 1f       	adc	r22, r18
 7aa:	83 9f       	mul	r24, r19
 7ac:	a0 0d       	add	r26, r0
 7ae:	61 1d       	adc	r22, r1
 7b0:	22 1f       	adc	r18, r18
 7b2:	74 9f       	mul	r23, r20
 7b4:	33 27       	eor	r19, r19
 7b6:	a0 0d       	add	r26, r0
 7b8:	61 1d       	adc	r22, r1
 7ba:	23 1f       	adc	r18, r19
 7bc:	84 9f       	mul	r24, r20
 7be:	60 0d       	add	r22, r0
 7c0:	21 1d       	adc	r18, r1
 7c2:	82 2f       	mov	r24, r18
 7c4:	76 2f       	mov	r23, r22
 7c6:	6a 2f       	mov	r22, r26
 7c8:	11 24       	eor	r1, r1
 7ca:	9f 57       	subi	r25, 0x7F	; 127
 7cc:	50 40       	sbci	r21, 0x00	; 0
 7ce:	9a f0       	brmi	.+38     	; 0x7f6 <__mulsf3_pse+0x88>
 7d0:	f1 f0       	breq	.+60     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7d2:	88 23       	and	r24, r24
 7d4:	4a f0       	brmi	.+18     	; 0x7e8 <__mulsf3_pse+0x7a>
 7d6:	ee 0f       	add	r30, r30
 7d8:	ff 1f       	adc	r31, r31
 7da:	bb 1f       	adc	r27, r27
 7dc:	66 1f       	adc	r22, r22
 7de:	77 1f       	adc	r23, r23
 7e0:	88 1f       	adc	r24, r24
 7e2:	91 50       	subi	r25, 0x01	; 1
 7e4:	50 40       	sbci	r21, 0x00	; 0
 7e6:	a9 f7       	brne	.-22     	; 0x7d2 <__mulsf3_pse+0x64>
 7e8:	9e 3f       	cpi	r25, 0xFE	; 254
 7ea:	51 05       	cpc	r21, r1
 7ec:	80 f0       	brcs	.+32     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7ee:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 7f2:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 7f6:	5f 3f       	cpi	r21, 0xFF	; 255
 7f8:	e4 f3       	brlt	.-8      	; 0x7f2 <__mulsf3_pse+0x84>
 7fa:	98 3e       	cpi	r25, 0xE8	; 232
 7fc:	d4 f3       	brlt	.-12     	; 0x7f2 <__mulsf3_pse+0x84>
 7fe:	86 95       	lsr	r24
 800:	77 95       	ror	r23
 802:	67 95       	ror	r22
 804:	b7 95       	ror	r27
 806:	f7 95       	ror	r31
 808:	e7 95       	ror	r30
 80a:	9f 5f       	subi	r25, 0xFF	; 255
 80c:	c1 f7       	brne	.-16     	; 0x7fe <__mulsf3_pse+0x90>
 80e:	fe 2b       	or	r31, r30
 810:	88 0f       	add	r24, r24
 812:	91 1d       	adc	r25, r1
 814:	96 95       	lsr	r25
 816:	87 95       	ror	r24
 818:	97 f9       	bld	r25, 7
 81a:	08 95       	ret

0000081c <_exit>:
 81c:	f8 94       	cli

0000081e <__stop_program>:
 81e:	ff cf       	rjmp	.-2      	; 0x81e <__stop_program>
