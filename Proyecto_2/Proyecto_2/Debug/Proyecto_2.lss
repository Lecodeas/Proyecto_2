
Proyecto_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000006c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a10  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000881  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000590  00000000  00000000  00001a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000476  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000189  00000000  00000000  0000254a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000026d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 24 03 	jmp	0x648	; 0x648 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setupADC>:
#include "ADC.h"

uint8_t valoradc;

void setupADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Vcc ref | Just. Izq. | Mux ADC7
  96:	80 81       	ld	r24, Z
  98:	87 66       	ori	r24, 0x67	; 103
  9a:	80 83       	st	Z, r24
	ADCSRA = 0;
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Int. En | Presc. 128 (125kHz)
  a2:	80 81       	ld	r24, Z
  a4:	8f 60       	ori	r24, 0x0F	; 15
  a6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); // Enable
  a8:	80 81       	ld	r24, Z
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Primer Inicio
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <fetchADCH>:
}

uint8_t fetchADCH(void){
	return (valoradc);
}
  b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <valoradc>
  ba:	08 95       	ret

000000bc <__vector_21>:

ISR(ADC_vect){
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
	valoradc = ADCH; // Almacenar valor
  c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valoradc>
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <setupGeneral>:
//OTRAS FUNCIONES

void setupGeneral(void){
	//Entradas y Salidas
	//ENTRADAS
	DDRD = 0; //Solo PD1 será salida
  dc:	1a b8       	out	0x0a, r1	; 10
	
	//SALIDAS
	DDRC = 0; //Todas salidas (Digital disabled para PC4 y PC5)
  de:	17 b8       	out	0x07, r1	; 7
	DDRB = 0xFF; //Todas salidas
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD1);		
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	08 95       	ret

000000ec <main>:
void setupGeneral(void);

//PRINCIPAL
int main(void)
{
	cli(); 
  ec:	f8 94       	cli
    setupADC();
  ee:	0e 94 48 00 	call	0x90	; 0x90 <setupADC>
	setupPWM1();
  f2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setupPWM1>
	setupGeneral();
  f6:	0e 94 6e 00 	call	0xdc	; 0xdc <setupGeneral>
	sei();
  fa:	78 94       	sei
	
    while (1) 
    {
		//Servo 1
		adchleido = fetchADCH(); //Recibo el adch actual
  fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <fetchADCH>
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		actualizar_servo(adchleido, 1); //Lo envía al servo 1
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <actualizar_servo>
		ADMUX &= 0xF0;
 10e:	cc e7       	ldi	r28, 0x7C	; 124
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	88 81       	ld	r24, Y
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	88 83       	st	Y, r24
		ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1); //Remultiplexado ADC6
 118:	88 81       	ld	r24, Y
 11a:	86 66       	ori	r24, 0x66	; 102
 11c:	88 83       	st	Y, r24
		ADCSRA |= (1<<ADSC); //Volver a iniciar ADC
 11e:	0a e7       	ldi	r16, 0x7A	; 122
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	f8 01       	movw	r30, r16
 124:	80 81       	ld	r24, Z
 126:	80 64       	ori	r24, 0x40	; 64
 128:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f e3       	ldi	r24, 0x3F	; 63
 12c:	9c e9       	ldi	r25, 0x9C	; 156
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x42>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x48>
 134:	00 00       	nop
		_delay_ms(1);
		
		//Servo 2
		adchleido = fetchADCH(); //Recibo el adch actual
 136:	0e 94 5b 00 	call	0xb6	; 0xb6 <fetchADCH>
 13a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		actualizar_servo(adchleido, 2); //Lo envía al servo 1
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 142:	62 e0       	ldi	r22, 0x02	; 2
 144:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <actualizar_servo>
		ADMUX &= 0xF0;
 148:	88 81       	ld	r24, Y
 14a:	80 7f       	andi	r24, 0xF0	; 240
 14c:	88 83       	st	Y, r24
		ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Remultiplexado ADC7
 14e:	88 81       	ld	r24, Y
 150:	87 66       	ori	r24, 0x67	; 103
 152:	88 83       	st	Y, r24
		ADCSRA |= (1<<ADSC); //Volver a iniciar ADC
 154:	f8 01       	movw	r30, r16
 156:	80 81       	ld	r24, Z
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	80 83       	st	Z, r24
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	9c e9       	ldi	r25, 0x9C	; 156
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0x74>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x7a>
 166:	00 00       	nop
 168:	c9 cf       	rjmp	.-110    	; 0xfc <main+0x10>

0000016a <actualizar_pwm>:
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11); //A1 No inverted | B1 No inverted | Fast con ICR1 Top
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
}

static void actualizar_pwm(uint16_t i, uint8_t NumServo){
	listo_actualizar_pwm = 1;
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <listo_actualizar_pwm>
	while (listo_actualizar_pwm != 0){
 170:	0c c0       	rjmp	.+24     	; 0x18a <actualizar_pwm+0x20>
		//El valor del pulso depende del leído en ADCH
		//El OCR1 modificado depende de NumServo
		if (NumServo==1){
 172:	61 30       	cpi	r22, 0x01	; 1
 174:	21 f4       	brne	.+8      	; 0x17e <actualizar_pwm+0x14>
			OCR1AH = (i & 0xFF00) >> 8;
 176:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = (i & 0x00FF);
 17a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		if(NumServo==2){
 17e:	62 30       	cpi	r22, 0x02	; 2
 180:	21 f4       	brne	.+8      	; 0x18a <actualizar_pwm+0x20>
			OCR1BH = (i & 0xFF00) >> 8;
 182:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
			OCR1BL = (i & 0x00FF);
 186:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
}

static void actualizar_pwm(uint16_t i, uint8_t NumServo){
	listo_actualizar_pwm = 1;
	while (listo_actualizar_pwm != 0){
 18a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <listo_actualizar_pwm>
 18e:	21 11       	cpse	r18, r1
 190:	f0 cf       	rjmp	.-32     	; 0x172 <actualizar_pwm+0x8>
		if(NumServo==2){
			OCR1BH = (i & 0xFF00) >> 8;
			OCR1BL = (i & 0x00FF);
		}
	}
}
 192:	08 95       	ret

00000194 <__vector_13>:

#include "PWM1.h"

uint8_t listo_actualizar_pwm = 0;

ISR(TIMER1_OVF_vect){
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
	//Regresa a los 20ms
	listo_actualizar_pwm = 0;
 19e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <listo_actualizar_pwm>
}
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <setupPWM1>:


void setupPWM1(void){
	//Interrupciones
	TIMSK1 = 0;
 1ac:	ef e6       	ldi	r30, 0x6F	; 111
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	10 82       	st	Z, r1
	TIMSK1 = (1<<TOIE1); //Overflow
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 83       	st	Z, r24
	
	//Top en ICR1
	ICR1H = (PWMTOP & 0xFF00) >> 8;
 1b6:	8c e9       	ldi	r24, 0x9C	; 156
 1b8:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = (PWMTOP & 0x00FF);
 1bc:	8f e3       	ldi	r24, 0x3F	; 63
 1be:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	//Inicializar servo al minimo
	OCR1AH = (SERVOMIN & 0xFF00) >> 8;
 1c2:	94 e0       	ldi	r25, 0x04	; 4
 1c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = (SERVOMIN & 0x00FF);
 1c8:	87 ef       	ldi	r24, 0xF7	; 247
 1ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	OCR1BH = (SERVOMIN & 0xFF00) >> 8;
 1ce:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
	OCR1BL = (SERVOMIN & 0x00FF);
 1d2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	//Forma, modo, prescaler
	TCCR1A = 0;
 1d6:	a0 e8       	ldi	r26, 0x80	; 128
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	1c 92       	st	X, r1
	TCCR1B = 0;
 1dc:	e1 e8       	ldi	r30, 0x81	; 129
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	10 82       	st	Z, r1
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11); //A1 No inverted | B1 No inverted | Fast con ICR1 Top
 1e2:	8c 91       	ld	r24, X
 1e4:	82 6a       	ori	r24, 0xA2	; 162
 1e6:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
 1e8:	80 81       	ld	r24, Z
 1ea:	8a 61       	ori	r24, 0x1A	; 26
 1ec:	80 83       	st	Z, r24
 1ee:	08 95       	ret

000001f0 <actualizar_servo>:
			OCR1BL = (i & 0x00FF);
		}
	}
}

void actualizar_servo(uint8_t adchleido, uint8_t servo_a_modificar){
 1f0:	cf 93       	push	r28
 1f2:	c6 2f       	mov	r28, r22
	//Conversión de lectura de ADC a pulso en PWM
	float razon = (float)adchleido/(float)255;
 1f4:	68 2f       	mov	r22, r24
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 29 02 	call	0x452	; 0x452 <__floatunsisf>
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	4f e7       	ldi	r20, 0x7F	; 127
 206:	53 e4       	ldi	r21, 0x43	; 67
 208:	0e 94 88 01 	call	0x310	; 0x310 <__divsf3>
	razon = (((float)SERVOMAX - (float)SERVOMIN)*razon) + (float)SERVOMIN;
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e6       	ldi	r19, 0x60	; 96
 210:	4c e5       	ldi	r20, 0x5C	; 92
 212:	55 e4       	ldi	r21, 0x45	; 69
 214:	0e 94 b7 02 	call	0x56e	; 0x56e <__mulsf3>
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	30 ee       	ldi	r19, 0xE0	; 224
 21c:	4e e9       	ldi	r20, 0x9E	; 158
 21e:	54 e4       	ldi	r21, 0x44	; 68
 220:	0e 94 1c 01 	call	0x238	; 0x238 <__addsf3>
	uint16_t valorservo = (uint16_t)razon;
 224:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__fixunssfsi>
 228:	dc 01       	movw	r26, r24
 22a:	cb 01       	movw	r24, r22
	actualizar_pwm(valorservo, servo_a_modificar);
 22c:	6c 2f       	mov	r22, r28
 22e:	0e 94 b5 00 	call	0x16a	; 0x16a <actualizar_pwm>
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <__subsf3>:
 236:	50 58       	subi	r21, 0x80	; 128

00000238 <__addsf3>:
 238:	bb 27       	eor	r27, r27
 23a:	aa 27       	eor	r26, r26
 23c:	0e 94 33 01 	call	0x266	; 0x266 <__addsf3x>
 240:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__fp_round>
 244:	0e 94 6f 02 	call	0x4de	; 0x4de <__fp_pscA>
 248:	38 f0       	brcs	.+14     	; 0x258 <__addsf3+0x20>
 24a:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_pscB>
 24e:	20 f0       	brcs	.+8      	; 0x258 <__addsf3+0x20>
 250:	39 f4       	brne	.+14     	; 0x260 <__addsf3+0x28>
 252:	9f 3f       	cpi	r25, 0xFF	; 255
 254:	19 f4       	brne	.+6      	; 0x25c <__addsf3+0x24>
 256:	26 f4       	brtc	.+8      	; 0x260 <__addsf3+0x28>
 258:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_nan>
 25c:	0e f4       	brtc	.+2      	; 0x260 <__addsf3+0x28>
 25e:	e0 95       	com	r30
 260:	e7 fb       	bst	r30, 7
 262:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__fp_inf>

00000266 <__addsf3x>:
 266:	e9 2f       	mov	r30, r25
 268:	0e 94 8e 02 	call	0x51c	; 0x51c <__fp_split3>
 26c:	58 f3       	brcs	.-42     	; 0x244 <__addsf3+0xc>
 26e:	ba 17       	cp	r27, r26
 270:	62 07       	cpc	r22, r18
 272:	73 07       	cpc	r23, r19
 274:	84 07       	cpc	r24, r20
 276:	95 07       	cpc	r25, r21
 278:	20 f0       	brcs	.+8      	; 0x282 <__addsf3x+0x1c>
 27a:	79 f4       	brne	.+30     	; 0x29a <__addsf3x+0x34>
 27c:	a6 f5       	brtc	.+104    	; 0x2e6 <__addsf3x+0x80>
 27e:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_zero>
 282:	0e f4       	brtc	.+2      	; 0x286 <__addsf3x+0x20>
 284:	e0 95       	com	r30
 286:	0b 2e       	mov	r0, r27
 288:	ba 2f       	mov	r27, r26
 28a:	a0 2d       	mov	r26, r0
 28c:	0b 01       	movw	r0, r22
 28e:	b9 01       	movw	r22, r18
 290:	90 01       	movw	r18, r0
 292:	0c 01       	movw	r0, r24
 294:	ca 01       	movw	r24, r20
 296:	a0 01       	movw	r20, r0
 298:	11 24       	eor	r1, r1
 29a:	ff 27       	eor	r31, r31
 29c:	59 1b       	sub	r21, r25
 29e:	99 f0       	breq	.+38     	; 0x2c6 <__addsf3x+0x60>
 2a0:	59 3f       	cpi	r21, 0xF9	; 249
 2a2:	50 f4       	brcc	.+20     	; 0x2b8 <__addsf3x+0x52>
 2a4:	50 3e       	cpi	r21, 0xE0	; 224
 2a6:	68 f1       	brcs	.+90     	; 0x302 <__addsf3x+0x9c>
 2a8:	1a 16       	cp	r1, r26
 2aa:	f0 40       	sbci	r31, 0x00	; 0
 2ac:	a2 2f       	mov	r26, r18
 2ae:	23 2f       	mov	r18, r19
 2b0:	34 2f       	mov	r19, r20
 2b2:	44 27       	eor	r20, r20
 2b4:	58 5f       	subi	r21, 0xF8	; 248
 2b6:	f3 cf       	rjmp	.-26     	; 0x29e <__addsf3x+0x38>
 2b8:	46 95       	lsr	r20
 2ba:	37 95       	ror	r19
 2bc:	27 95       	ror	r18
 2be:	a7 95       	ror	r26
 2c0:	f0 40       	sbci	r31, 0x00	; 0
 2c2:	53 95       	inc	r21
 2c4:	c9 f7       	brne	.-14     	; 0x2b8 <__addsf3x+0x52>
 2c6:	7e f4       	brtc	.+30     	; 0x2e6 <__addsf3x+0x80>
 2c8:	1f 16       	cp	r1, r31
 2ca:	ba 0b       	sbc	r27, r26
 2cc:	62 0b       	sbc	r22, r18
 2ce:	73 0b       	sbc	r23, r19
 2d0:	84 0b       	sbc	r24, r20
 2d2:	ba f0       	brmi	.+46     	; 0x302 <__addsf3x+0x9c>
 2d4:	91 50       	subi	r25, 0x01	; 1
 2d6:	a1 f0       	breq	.+40     	; 0x300 <__addsf3x+0x9a>
 2d8:	ff 0f       	add	r31, r31
 2da:	bb 1f       	adc	r27, r27
 2dc:	66 1f       	adc	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	88 1f       	adc	r24, r24
 2e2:	c2 f7       	brpl	.-16     	; 0x2d4 <__addsf3x+0x6e>
 2e4:	0e c0       	rjmp	.+28     	; 0x302 <__addsf3x+0x9c>
 2e6:	ba 0f       	add	r27, r26
 2e8:	62 1f       	adc	r22, r18
 2ea:	73 1f       	adc	r23, r19
 2ec:	84 1f       	adc	r24, r20
 2ee:	48 f4       	brcc	.+18     	; 0x302 <__addsf3x+0x9c>
 2f0:	87 95       	ror	r24
 2f2:	77 95       	ror	r23
 2f4:	67 95       	ror	r22
 2f6:	b7 95       	ror	r27
 2f8:	f7 95       	ror	r31
 2fa:	9e 3f       	cpi	r25, 0xFE	; 254
 2fc:	08 f0       	brcs	.+2      	; 0x300 <__addsf3x+0x9a>
 2fe:	b0 cf       	rjmp	.-160    	; 0x260 <__addsf3+0x28>
 300:	93 95       	inc	r25
 302:	88 0f       	add	r24, r24
 304:	08 f0       	brcs	.+2      	; 0x308 <__addsf3x+0xa2>
 306:	99 27       	eor	r25, r25
 308:	ee 0f       	add	r30, r30
 30a:	97 95       	ror	r25
 30c:	87 95       	ror	r24
 30e:	08 95       	ret

00000310 <__divsf3>:
 310:	0e 94 9c 01 	call	0x338	; 0x338 <__divsf3x>
 314:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__fp_round>
 318:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_pscB>
 31c:	58 f0       	brcs	.+22     	; 0x334 <__divsf3+0x24>
 31e:	0e 94 6f 02 	call	0x4de	; 0x4de <__fp_pscA>
 322:	40 f0       	brcs	.+16     	; 0x334 <__divsf3+0x24>
 324:	29 f4       	brne	.+10     	; 0x330 <__divsf3+0x20>
 326:	5f 3f       	cpi	r21, 0xFF	; 255
 328:	29 f0       	breq	.+10     	; 0x334 <__divsf3+0x24>
 32a:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__fp_inf>
 32e:	51 11       	cpse	r21, r1
 330:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_szero>
 334:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_nan>

00000338 <__divsf3x>:
 338:	0e 94 8e 02 	call	0x51c	; 0x51c <__fp_split3>
 33c:	68 f3       	brcs	.-38     	; 0x318 <__divsf3+0x8>

0000033e <__divsf3_pse>:
 33e:	99 23       	and	r25, r25
 340:	b1 f3       	breq	.-20     	; 0x32e <__divsf3+0x1e>
 342:	55 23       	and	r21, r21
 344:	91 f3       	breq	.-28     	; 0x32a <__divsf3+0x1a>
 346:	95 1b       	sub	r25, r21
 348:	55 0b       	sbc	r21, r21
 34a:	bb 27       	eor	r27, r27
 34c:	aa 27       	eor	r26, r26
 34e:	62 17       	cp	r22, r18
 350:	73 07       	cpc	r23, r19
 352:	84 07       	cpc	r24, r20
 354:	38 f0       	brcs	.+14     	; 0x364 <__divsf3_pse+0x26>
 356:	9f 5f       	subi	r25, 0xFF	; 255
 358:	5f 4f       	sbci	r21, 0xFF	; 255
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	44 1f       	adc	r20, r20
 360:	aa 1f       	adc	r26, r26
 362:	a9 f3       	breq	.-22     	; 0x34e <__divsf3_pse+0x10>
 364:	35 d0       	rcall	.+106    	; 0x3d0 <__divsf3_pse+0x92>
 366:	0e 2e       	mov	r0, r30
 368:	3a f0       	brmi	.+14     	; 0x378 <__divsf3_pse+0x3a>
 36a:	e0 e8       	ldi	r30, 0x80	; 128
 36c:	32 d0       	rcall	.+100    	; 0x3d2 <__divsf3_pse+0x94>
 36e:	91 50       	subi	r25, 0x01	; 1
 370:	50 40       	sbci	r21, 0x00	; 0
 372:	e6 95       	lsr	r30
 374:	00 1c       	adc	r0, r0
 376:	ca f7       	brpl	.-14     	; 0x36a <__divsf3_pse+0x2c>
 378:	2b d0       	rcall	.+86     	; 0x3d0 <__divsf3_pse+0x92>
 37a:	fe 2f       	mov	r31, r30
 37c:	29 d0       	rcall	.+82     	; 0x3d0 <__divsf3_pse+0x92>
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	88 1f       	adc	r24, r24
 384:	bb 1f       	adc	r27, r27
 386:	26 17       	cp	r18, r22
 388:	37 07       	cpc	r19, r23
 38a:	48 07       	cpc	r20, r24
 38c:	ab 07       	cpc	r26, r27
 38e:	b0 e8       	ldi	r27, 0x80	; 128
 390:	09 f0       	breq	.+2      	; 0x394 <__divsf3_pse+0x56>
 392:	bb 0b       	sbc	r27, r27
 394:	80 2d       	mov	r24, r0
 396:	bf 01       	movw	r22, r30
 398:	ff 27       	eor	r31, r31
 39a:	93 58       	subi	r25, 0x83	; 131
 39c:	5f 4f       	sbci	r21, 0xFF	; 255
 39e:	3a f0       	brmi	.+14     	; 0x3ae <__divsf3_pse+0x70>
 3a0:	9e 3f       	cpi	r25, 0xFE	; 254
 3a2:	51 05       	cpc	r21, r1
 3a4:	78 f0       	brcs	.+30     	; 0x3c4 <__divsf3_pse+0x86>
 3a6:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__fp_inf>
 3aa:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_szero>
 3ae:	5f 3f       	cpi	r21, 0xFF	; 255
 3b0:	e4 f3       	brlt	.-8      	; 0x3aa <__divsf3_pse+0x6c>
 3b2:	98 3e       	cpi	r25, 0xE8	; 232
 3b4:	d4 f3       	brlt	.-12     	; 0x3aa <__divsf3_pse+0x6c>
 3b6:	86 95       	lsr	r24
 3b8:	77 95       	ror	r23
 3ba:	67 95       	ror	r22
 3bc:	b7 95       	ror	r27
 3be:	f7 95       	ror	r31
 3c0:	9f 5f       	subi	r25, 0xFF	; 255
 3c2:	c9 f7       	brne	.-14     	; 0x3b6 <__divsf3_pse+0x78>
 3c4:	88 0f       	add	r24, r24
 3c6:	91 1d       	adc	r25, r1
 3c8:	96 95       	lsr	r25
 3ca:	87 95       	ror	r24
 3cc:	97 f9       	bld	r25, 7
 3ce:	08 95       	ret
 3d0:	e1 e0       	ldi	r30, 0x01	; 1
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	88 1f       	adc	r24, r24
 3d8:	bb 1f       	adc	r27, r27
 3da:	62 17       	cp	r22, r18
 3dc:	73 07       	cpc	r23, r19
 3de:	84 07       	cpc	r24, r20
 3e0:	ba 07       	cpc	r27, r26
 3e2:	20 f0       	brcs	.+8      	; 0x3ec <__divsf3_pse+0xae>
 3e4:	62 1b       	sub	r22, r18
 3e6:	73 0b       	sbc	r23, r19
 3e8:	84 0b       	sbc	r24, r20
 3ea:	ba 0b       	sbc	r27, r26
 3ec:	ee 1f       	adc	r30, r30
 3ee:	88 f7       	brcc	.-30     	; 0x3d2 <__divsf3_pse+0x94>
 3f0:	e0 95       	com	r30
 3f2:	08 95       	ret

000003f4 <__fixunssfsi>:
 3f4:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_splitA>
 3f8:	88 f0       	brcs	.+34     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3fa:	9f 57       	subi	r25, 0x7F	; 127
 3fc:	98 f0       	brcs	.+38     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3fe:	b9 2f       	mov	r27, r25
 400:	99 27       	eor	r25, r25
 402:	b7 51       	subi	r27, 0x17	; 23
 404:	b0 f0       	brcs	.+44     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 406:	e1 f0       	breq	.+56     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	88 1f       	adc	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	1a f0       	brmi	.+6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 412:	ba 95       	dec	r27
 414:	c9 f7       	brne	.-14     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 416:	14 c0       	rjmp	.+40     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 418:	b1 30       	cpi	r27, 0x01	; 1
 41a:	91 f0       	breq	.+36     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 41c:	0e 94 b0 02 	call	0x560	; 0x560 <__fp_zero>
 420:	b1 e0       	ldi	r27, 0x01	; 1
 422:	08 95       	ret
 424:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_zero>
 428:	67 2f       	mov	r22, r23
 42a:	78 2f       	mov	r23, r24
 42c:	88 27       	eor	r24, r24
 42e:	b8 5f       	subi	r27, 0xF8	; 248
 430:	39 f0       	breq	.+14     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 432:	b9 3f       	cpi	r27, 0xF9	; 249
 434:	cc f3       	brlt	.-14     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 436:	86 95       	lsr	r24
 438:	77 95       	ror	r23
 43a:	67 95       	ror	r22
 43c:	b3 95       	inc	r27
 43e:	d9 f7       	brne	.-10     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 440:	3e f4       	brtc	.+14     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 442:	90 95       	com	r25
 444:	80 95       	com	r24
 446:	70 95       	com	r23
 448:	61 95       	neg	r22
 44a:	7f 4f       	sbci	r23, 0xFF	; 255
 44c:	8f 4f       	sbci	r24, 0xFF	; 255
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
 450:	08 95       	ret

00000452 <__floatunsisf>:
 452:	e8 94       	clt
 454:	09 c0       	rjmp	.+18     	; 0x468 <__floatsisf+0x12>

00000456 <__floatsisf>:
 456:	97 fb       	bst	r25, 7
 458:	3e f4       	brtc	.+14     	; 0x468 <__floatsisf+0x12>
 45a:	90 95       	com	r25
 45c:	80 95       	com	r24
 45e:	70 95       	com	r23
 460:	61 95       	neg	r22
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8f 4f       	sbci	r24, 0xFF	; 255
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	99 23       	and	r25, r25
 46a:	a9 f0       	breq	.+42     	; 0x496 <__floatsisf+0x40>
 46c:	f9 2f       	mov	r31, r25
 46e:	96 e9       	ldi	r25, 0x96	; 150
 470:	bb 27       	eor	r27, r27
 472:	93 95       	inc	r25
 474:	f6 95       	lsr	r31
 476:	87 95       	ror	r24
 478:	77 95       	ror	r23
 47a:	67 95       	ror	r22
 47c:	b7 95       	ror	r27
 47e:	f1 11       	cpse	r31, r1
 480:	f8 cf       	rjmp	.-16     	; 0x472 <__floatsisf+0x1c>
 482:	fa f4       	brpl	.+62     	; 0x4c2 <__floatsisf+0x6c>
 484:	bb 0f       	add	r27, r27
 486:	11 f4       	brne	.+4      	; 0x48c <__floatsisf+0x36>
 488:	60 ff       	sbrs	r22, 0
 48a:	1b c0       	rjmp	.+54     	; 0x4c2 <__floatsisf+0x6c>
 48c:	6f 5f       	subi	r22, 0xFF	; 255
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8f 4f       	sbci	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	16 c0       	rjmp	.+44     	; 0x4c2 <__floatsisf+0x6c>
 496:	88 23       	and	r24, r24
 498:	11 f0       	breq	.+4      	; 0x49e <__floatsisf+0x48>
 49a:	96 e9       	ldi	r25, 0x96	; 150
 49c:	11 c0       	rjmp	.+34     	; 0x4c0 <__floatsisf+0x6a>
 49e:	77 23       	and	r23, r23
 4a0:	21 f0       	breq	.+8      	; 0x4aa <__floatsisf+0x54>
 4a2:	9e e8       	ldi	r25, 0x8E	; 142
 4a4:	87 2f       	mov	r24, r23
 4a6:	76 2f       	mov	r23, r22
 4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <__floatsisf+0x5e>
 4aa:	66 23       	and	r22, r22
 4ac:	71 f0       	breq	.+28     	; 0x4ca <__floatsisf+0x74>
 4ae:	96 e8       	ldi	r25, 0x86	; 134
 4b0:	86 2f       	mov	r24, r22
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	2a f0       	brmi	.+10     	; 0x4c2 <__floatsisf+0x6c>
 4b8:	9a 95       	dec	r25
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	88 1f       	adc	r24, r24
 4c0:	da f7       	brpl	.-10     	; 0x4b8 <__floatsisf+0x62>
 4c2:	88 0f       	add	r24, r24
 4c4:	96 95       	lsr	r25
 4c6:	87 95       	ror	r24
 4c8:	97 f9       	bld	r25, 7
 4ca:	08 95       	ret

000004cc <__fp_inf>:
 4cc:	97 f9       	bld	r25, 7
 4ce:	9f 67       	ori	r25, 0x7F	; 127
 4d0:	80 e8       	ldi	r24, 0x80	; 128
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	08 95       	ret

000004d8 <__fp_nan>:
 4d8:	9f ef       	ldi	r25, 0xFF	; 255
 4da:	80 ec       	ldi	r24, 0xC0	; 192
 4dc:	08 95       	ret

000004de <__fp_pscA>:
 4de:	00 24       	eor	r0, r0
 4e0:	0a 94       	dec	r0
 4e2:	16 16       	cp	r1, r22
 4e4:	17 06       	cpc	r1, r23
 4e6:	18 06       	cpc	r1, r24
 4e8:	09 06       	cpc	r0, r25
 4ea:	08 95       	ret

000004ec <__fp_pscB>:
 4ec:	00 24       	eor	r0, r0
 4ee:	0a 94       	dec	r0
 4f0:	12 16       	cp	r1, r18
 4f2:	13 06       	cpc	r1, r19
 4f4:	14 06       	cpc	r1, r20
 4f6:	05 06       	cpc	r0, r21
 4f8:	08 95       	ret

000004fa <__fp_round>:
 4fa:	09 2e       	mov	r0, r25
 4fc:	03 94       	inc	r0
 4fe:	00 0c       	add	r0, r0
 500:	11 f4       	brne	.+4      	; 0x506 <__fp_round+0xc>
 502:	88 23       	and	r24, r24
 504:	52 f0       	brmi	.+20     	; 0x51a <__fp_round+0x20>
 506:	bb 0f       	add	r27, r27
 508:	40 f4       	brcc	.+16     	; 0x51a <__fp_round+0x20>
 50a:	bf 2b       	or	r27, r31
 50c:	11 f4       	brne	.+4      	; 0x512 <__fp_round+0x18>
 50e:	60 ff       	sbrs	r22, 0
 510:	04 c0       	rjmp	.+8      	; 0x51a <__fp_round+0x20>
 512:	6f 5f       	subi	r22, 0xFF	; 255
 514:	7f 4f       	sbci	r23, 0xFF	; 255
 516:	8f 4f       	sbci	r24, 0xFF	; 255
 518:	9f 4f       	sbci	r25, 0xFF	; 255
 51a:	08 95       	ret

0000051c <__fp_split3>:
 51c:	57 fd       	sbrc	r21, 7
 51e:	90 58       	subi	r25, 0x80	; 128
 520:	44 0f       	add	r20, r20
 522:	55 1f       	adc	r21, r21
 524:	59 f0       	breq	.+22     	; 0x53c <__fp_splitA+0x10>
 526:	5f 3f       	cpi	r21, 0xFF	; 255
 528:	71 f0       	breq	.+28     	; 0x546 <__fp_splitA+0x1a>
 52a:	47 95       	ror	r20

0000052c <__fp_splitA>:
 52c:	88 0f       	add	r24, r24
 52e:	97 fb       	bst	r25, 7
 530:	99 1f       	adc	r25, r25
 532:	61 f0       	breq	.+24     	; 0x54c <__fp_splitA+0x20>
 534:	9f 3f       	cpi	r25, 0xFF	; 255
 536:	79 f0       	breq	.+30     	; 0x556 <__fp_splitA+0x2a>
 538:	87 95       	ror	r24
 53a:	08 95       	ret
 53c:	12 16       	cp	r1, r18
 53e:	13 06       	cpc	r1, r19
 540:	14 06       	cpc	r1, r20
 542:	55 1f       	adc	r21, r21
 544:	f2 cf       	rjmp	.-28     	; 0x52a <__fp_split3+0xe>
 546:	46 95       	lsr	r20
 548:	f1 df       	rcall	.-30     	; 0x52c <__fp_splitA>
 54a:	08 c0       	rjmp	.+16     	; 0x55c <__fp_splitA+0x30>
 54c:	16 16       	cp	r1, r22
 54e:	17 06       	cpc	r1, r23
 550:	18 06       	cpc	r1, r24
 552:	99 1f       	adc	r25, r25
 554:	f1 cf       	rjmp	.-30     	; 0x538 <__fp_splitA+0xc>
 556:	86 95       	lsr	r24
 558:	71 05       	cpc	r23, r1
 55a:	61 05       	cpc	r22, r1
 55c:	08 94       	sec
 55e:	08 95       	ret

00000560 <__fp_zero>:
 560:	e8 94       	clt

00000562 <__fp_szero>:
 562:	bb 27       	eor	r27, r27
 564:	66 27       	eor	r22, r22
 566:	77 27       	eor	r23, r23
 568:	cb 01       	movw	r24, r22
 56a:	97 f9       	bld	r25, 7
 56c:	08 95       	ret

0000056e <__mulsf3>:
 56e:	0e 94 ca 02 	call	0x594	; 0x594 <__mulsf3x>
 572:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__fp_round>
 576:	0e 94 6f 02 	call	0x4de	; 0x4de <__fp_pscA>
 57a:	38 f0       	brcs	.+14     	; 0x58a <__mulsf3+0x1c>
 57c:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_pscB>
 580:	20 f0       	brcs	.+8      	; 0x58a <__mulsf3+0x1c>
 582:	95 23       	and	r25, r21
 584:	11 f0       	breq	.+4      	; 0x58a <__mulsf3+0x1c>
 586:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__fp_inf>
 58a:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_nan>
 58e:	11 24       	eor	r1, r1
 590:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_szero>

00000594 <__mulsf3x>:
 594:	0e 94 8e 02 	call	0x51c	; 0x51c <__fp_split3>
 598:	70 f3       	brcs	.-36     	; 0x576 <__mulsf3+0x8>

0000059a <__mulsf3_pse>:
 59a:	95 9f       	mul	r25, r21
 59c:	c1 f3       	breq	.-16     	; 0x58e <__mulsf3+0x20>
 59e:	95 0f       	add	r25, r21
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	55 1f       	adc	r21, r21
 5a4:	62 9f       	mul	r22, r18
 5a6:	f0 01       	movw	r30, r0
 5a8:	72 9f       	mul	r23, r18
 5aa:	bb 27       	eor	r27, r27
 5ac:	f0 0d       	add	r31, r0
 5ae:	b1 1d       	adc	r27, r1
 5b0:	63 9f       	mul	r22, r19
 5b2:	aa 27       	eor	r26, r26
 5b4:	f0 0d       	add	r31, r0
 5b6:	b1 1d       	adc	r27, r1
 5b8:	aa 1f       	adc	r26, r26
 5ba:	64 9f       	mul	r22, r20
 5bc:	66 27       	eor	r22, r22
 5be:	b0 0d       	add	r27, r0
 5c0:	a1 1d       	adc	r26, r1
 5c2:	66 1f       	adc	r22, r22
 5c4:	82 9f       	mul	r24, r18
 5c6:	22 27       	eor	r18, r18
 5c8:	b0 0d       	add	r27, r0
 5ca:	a1 1d       	adc	r26, r1
 5cc:	62 1f       	adc	r22, r18
 5ce:	73 9f       	mul	r23, r19
 5d0:	b0 0d       	add	r27, r0
 5d2:	a1 1d       	adc	r26, r1
 5d4:	62 1f       	adc	r22, r18
 5d6:	83 9f       	mul	r24, r19
 5d8:	a0 0d       	add	r26, r0
 5da:	61 1d       	adc	r22, r1
 5dc:	22 1f       	adc	r18, r18
 5de:	74 9f       	mul	r23, r20
 5e0:	33 27       	eor	r19, r19
 5e2:	a0 0d       	add	r26, r0
 5e4:	61 1d       	adc	r22, r1
 5e6:	23 1f       	adc	r18, r19
 5e8:	84 9f       	mul	r24, r20
 5ea:	60 0d       	add	r22, r0
 5ec:	21 1d       	adc	r18, r1
 5ee:	82 2f       	mov	r24, r18
 5f0:	76 2f       	mov	r23, r22
 5f2:	6a 2f       	mov	r22, r26
 5f4:	11 24       	eor	r1, r1
 5f6:	9f 57       	subi	r25, 0x7F	; 127
 5f8:	50 40       	sbci	r21, 0x00	; 0
 5fa:	9a f0       	brmi	.+38     	; 0x622 <__mulsf3_pse+0x88>
 5fc:	f1 f0       	breq	.+60     	; 0x63a <__mulsf3_pse+0xa0>
 5fe:	88 23       	and	r24, r24
 600:	4a f0       	brmi	.+18     	; 0x614 <__mulsf3_pse+0x7a>
 602:	ee 0f       	add	r30, r30
 604:	ff 1f       	adc	r31, r31
 606:	bb 1f       	adc	r27, r27
 608:	66 1f       	adc	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	91 50       	subi	r25, 0x01	; 1
 610:	50 40       	sbci	r21, 0x00	; 0
 612:	a9 f7       	brne	.-22     	; 0x5fe <__mulsf3_pse+0x64>
 614:	9e 3f       	cpi	r25, 0xFE	; 254
 616:	51 05       	cpc	r21, r1
 618:	80 f0       	brcs	.+32     	; 0x63a <__mulsf3_pse+0xa0>
 61a:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__fp_inf>
 61e:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_szero>
 622:	5f 3f       	cpi	r21, 0xFF	; 255
 624:	e4 f3       	brlt	.-8      	; 0x61e <__mulsf3_pse+0x84>
 626:	98 3e       	cpi	r25, 0xE8	; 232
 628:	d4 f3       	brlt	.-12     	; 0x61e <__mulsf3_pse+0x84>
 62a:	86 95       	lsr	r24
 62c:	77 95       	ror	r23
 62e:	67 95       	ror	r22
 630:	b7 95       	ror	r27
 632:	f7 95       	ror	r31
 634:	e7 95       	ror	r30
 636:	9f 5f       	subi	r25, 0xFF	; 255
 638:	c1 f7       	brne	.-16     	; 0x62a <__mulsf3_pse+0x90>
 63a:	fe 2b       	or	r31, r30
 63c:	88 0f       	add	r24, r24
 63e:	91 1d       	adc	r25, r1
 640:	96 95       	lsr	r25
 642:	87 95       	ror	r24
 644:	97 f9       	bld	r25, 7
 646:	08 95       	ret

00000648 <_exit>:
 648:	f8 94       	cli

0000064a <__stop_program>:
 64a:	ff cf       	rjmp	.-2      	; 0x64a <__stop_program>
